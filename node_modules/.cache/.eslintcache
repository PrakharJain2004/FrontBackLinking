[{"C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\index.js":"1","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\Dashboard.js":"2","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\ProfilePage.js":"3","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\LoginForm.js":"4","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\index.js":"5","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\ProfilePage.js":"6","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\Dashboard.js":"7","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\PostPage.js":"8","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\LoginForm.js":"9","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\SearchPage.js":"10"},{"size":6430,"mtime":1694969786848,"results":"11","hashOfConfig":"12"},{"size":7013,"mtime":1695019099464,"results":"13","hashOfConfig":"12"},{"size":15022,"mtime":1694867171299,"results":"14","hashOfConfig":"12"},{"size":3084,"mtime":1694972749820,"results":"15","hashOfConfig":"12"},{"size":8993,"mtime":1696356626476,"results":"16","hashOfConfig":"17"},{"size":64826,"mtime":1696389295597,"results":"18","hashOfConfig":"17"},{"size":26538,"mtime":1696389295637,"results":"19","hashOfConfig":"17"},{"size":11555,"mtime":1696389295617,"results":"20","hashOfConfig":"17"},{"size":15497,"mtime":1696389295667,"results":"21","hashOfConfig":"17"},{"size":5544,"mtime":1696389295652,"results":"22","hashOfConfig":"17"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1l7b5r7",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"1c4dmff",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\index.js",["58","59","60","61","62","63","64"],[],"C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\Dashboard.js",["65","66","67","68"],[],"C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\ProfilePage.js",["69","70","71"],[],"C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontEndM\\RVC\\src\\LoginForm.js",[],[],"C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\index.js",["72","73","74","75","76","77","78"],[],"import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Dashboard from './Dashboard';\r\nimport PostPage from './PostPage';\r\nimport ProfilePage from './ProfilePage';\r\nimport SearchPage from './SearchPage';\r\nimport LoginForm from \"./LoginForm\";\r\nimport homeIcon from './homeicon.png';\r\nimport postIcon from './posticon.png';\r\nimport profileIcon from './profileicon.png';\r\nimport searchIcon from './searchicon.png';\r\n\r\nconst App = () => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState('dashboard');\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n    const [activeTab, setActiveTab] = useState('confessions');\r\n\r\n    const [userData, setUserData] = useState({\r\n        confessions: [\r\n            {\r\n                \"id\": 1,\r\n                \"mentioned_user\": null,\r\n                \"content\": \"@tester_2 hello mister mmmmmmmmmmmmmmm mmmmmmmmmmmmmmm mmmmmmmmmmmmmmm mmmmmmmmmmmmmmmmmmmmmmmmmmmmmm mmmmmmmmmmmmmmm\",\r\n                \"date_posted\": \"2023-09-18T06:13:47.016000Z\",\r\n                \"author\": {\r\n                    \"id\": 1,\r\n                    \"username\": \"tester_1\",\r\n                    \"email\": \"\",\r\n                    \"first_name\": \"\",\r\n                    \"last_name\": \"\",\r\n                    \"password\": \"pbkdf2_sha256$600000$crDWiTkjmkfBnE5pDONpIx$2qKL6gKeoW8JSQtJNSMla0cyYkdq46KpN5+YdLkWuYs=\",\r\n\r\n                }\r\n            },\r\n            // ... other posts\r\n        ],\r\n        name: 'Friend2',\r\n        id:'2',\r\n        username:'tester_2',\r\n        profileImage: '.profileicon',\r\n        branch: 'CSE26',\r\n        bio: 'A passionate blogger and explorer!',\r\n\r\n\r\n\r\n\r\n        comments:[\r\n            {\r\n                \"id\": 1,\r\n                \"post_id\": 1,\r\n                \"comment\": \"Lorem Ipsum Dolor\",\r\n                \"user_commented\": {\r\n                    \"id\": 2,\r\n                    \"username\": \"tester_2\",\r\n                    \"email\": \"\",\r\n                    \"first_name\": \"\",\r\n                    \"last_name\": \"\",\r\n                    \"password\": \"pbkdf2_sha256$600000$4ilIIV6FQNK6Ngaw1ctO3U$UnNaZDD/yMBvt+v615TSzHLyF2OCMWgnWn3Gyf/lu0U=\"\r\n                },\r\n                \"upvote\": false,\r\n                \"downvote\":false,\r\n            },\r\n        ],\r\n\r\n\r\n        mentioned: [\r\n            { content: 'Hello, rvc' + '!', date_posted: \"2023-08-06T15:15:57Z\",},\r\n            { content: 'Another day, another post.',date_posted: \"2023-08-06T15:15:57Z\", },\r\n            { content: 'Another day, another post.',date_posted: \"2023-08-06T15:15:57Z\", },\r\n            { content: 'Another day, another post.',date_posted: \"2023-08-06T15:15:57Z\", },\r\n            { content: 'Another day, another post.' ,date_posted: \"2023-08-06T15:15:57Z\",},\r\n            { content: 'Another day, another post.',date_posted: \"2023-08-06T15:15:57Z\", },\r\n            { content: 'Another day, another post.' ,date_posted: \"2023-08-06T15:15:57Z\",}\r\n\r\n\r\n            // ... other posts\r\n        ],\r\n\r\n        // friends: [\r\n        //     { name: 'Friend1', username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png'},\r\n        //     { name: 'Friend2',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        //     { name: 'Friend3',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        //     { name: 'Friend1', username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png'},\r\n        //     { name: 'Friend2',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        //     { name: 'Friend3',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        //     { name: 'Friend1', username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png'},\r\n        //     { name: 'Friend2',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        //     { name: 'Friend3',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        //     // Add more friends as needed\r\n        // ],\r\n    });\r\n\r\n    const [usersData, setUsersData] = useState([\r\n        { name: 'Friend1',username:'abc',image: 'C:/Users/Prakhar Jain/OneDrive/Pictures/Harshit.png' },\r\n        { name: 'Friend2',username:'abc', image: 'C:\\\\Users\\\\Prakhar Jain\\\\WebstormProjects\\\\front-end\\\\Front-End\\\\Front-End\\\\My.jpg' },\r\n        { name: 'Friend3',username:'abc',image: 'C://Users//Prakhar Jain//WebstormProjects//front-end//Front-End//Front-End//My.jpg' },\r\n        // ... other users\r\n    ]);\r\n\r\n    const switchToPostPage = () => {\r\n        setCurrentPage('postPage');\r\n\r\n    };\r\n\r\n    const switchToDashboard = () => {\r\n        setCurrentPage('dashboard');\r\n\r\n    };\r\n\r\n    const switchToProfilePage = () => {\r\n        setCurrentPage('profilePage');\r\n\r\n    };\r\n\r\n    const switchToSearchPage = () => {\r\n        setCurrentPage('searchPage');\r\n\r\n    };\r\n\r\n    const handleTabClick = (tab) => {\r\n        setActiveTab(tab);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowWidth(window.innerWidth);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                {isAuthenticated && windowWidth <= 768 && (\r\n                    <div style={{ borderRadius:'11px', display: 'flex', justifyContent: 'space-around', fontSize: '33px', border: '0px solid #808080', marginBottom:'-1px', padding: '13px', position: 'fixed', bottom: '0', left: '0', right: '0', backgroundColor: '#ffffff', zIndex: '100', width: '100%', boxSizing: 'border-box', boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)', }}>\r\n                        <img\r\n                            src={homeIcon}\r\n                            onClick={() => switchToDashboard('dashboard')}\r\n                            style={{\r\n                                borderRadius:'50%',\r\n                                width: '31px',\r\n                                height: '31px',\r\n                                transform: currentPage === 'dashboard' ? 'scale(1.3)' : 'scale(1)',\r\n                            }}\r\n                        />\r\n                        <img\r\n                            src={searchIcon}\r\n                            onClick={() => switchToSearchPage('searchPage')}\r\n                            style={{\r\n                                borderRadius:'50%',\r\n                                width: '31px',\r\n                                height: '31px',\r\n                                transform: currentPage === 'searchPage' ? 'scale(1.3)' : 'scale(1)',\r\n                            }}\r\n                        />\r\n                        <img\r\n                            src={postIcon}\r\n                            onClick={() => switchToPostPage('postPage')}\r\n                            style={{\r\n                                borderRadius:'30%',\r\n                                width: '31px',\r\n                                height: '31px',\r\n                                transform: currentPage === 'postPage' ? 'scale(1.3)' : 'scale(1)',\r\n                            }}\r\n                        />\r\n                        <img\r\n                            src={profileIcon}\r\n                            onClick={() => switchToProfilePage('profilePage')}\r\n                            style={{\r\n                                borderRadius:'50%',\r\n                                width: '31px',\r\n                                height: '31px',\r\n                                transform: currentPage === 'profilePage' ? 'scale(1.3)' : 'scale(1)',\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {/* Other navigation elements */}\r\n            </nav>\r\n\r\n            {isAuthenticated ? (\r\n                // Render other pages when the user is authenticated\r\n                <>\r\n                    {currentPage === 'dashboard' && <Dashboard user={userData} />}\r\n                    {currentPage === 'postPage' && <PostPage switchToDashboard={switchToDashboard} users={usersData} />}\r\n                    {currentPage === 'profilePage' && <ProfilePage user={userData} activeTab={activeTab} handleTabClick={handleTabClick} setUserData={setUserData} />}\r\n                    {currentPage === 'searchPage' && <SearchPage usersData={usersData} />}\r\n                </>\r\n            ) : (\r\n                // Render the login form when the user is not authenticated\r\n                <LoginForm setIsAuthenticated={setIsAuthenticated} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\ProfilePage.js",["79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],[],"import React, {useEffect, useRef, useState} from 'react';\r\nimport menuIcon from './menuicon.png';\r\nimport likeicon from \"./likeicon.png\";\r\nimport dislikeicon from \"./dislikeicon.png\";\r\nimport commenticon from \"./commenticon.png\";\r\nimport CrossIcon from './cross.png';\r\nimport postmenuIcon from \"./postmenuicon.png\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst ProfilePage = ({user ,activeTab='confessions', handleTabClick,usersData}) => {\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n    const [showStickyNote, setShowStickyNote] = useState(true);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [filteredFriends, setFilteredFriends] = useState(user.friends);\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const [likeState, setLikeState] = useState({});\r\n    const [isCommentDropdownOpen, setCommentDropdownOpen] = useState(false);\r\n    const [selectedConfessionComments, setSelectedConfessionComments] = useState([]);\r\n    const [selectedConfessionId, setSelectedConfessionId] = useState(null);\r\n    const [commentCounts, setCommentCounts] = useState({});\r\n    const [showAboutOptions, setShowAboutOptions] = useState(false);\r\n    const [showEditProfileForm, setShowEditProfileForm] = useState(false);\r\n    const [profilePic, setProfilePic] = useState(null);\r\n    const [confessions, setConfessions] = useState([]);\r\n    const [mentions, setMentions] = useState([]);\r\n    const token = localStorage.getItem('token');\r\n    const [newComment, setNewComment] = useState('');\r\n    const [userData, setUserData] = useState(null);\r\n    const [newName, setNewName] = useState(user.name);\r\n    const [newBio, setNewBio] = useState(user.bio);\r\n    const [showpostDropdown, setShowpostDropdown] = useState(false);\r\n    const dropdownRef = useRef(null);\r\n    const [posts, setPosts] = useState([]);\r\n    const [selectedConfessionIdForMenu, setSelectedConfessionIdForMenu] = useState(null);\r\n    const [username, setUsername] = useState('');\r\n\r\n\r\n\r\n    const fetchConfessions = async () => {\r\n        try {\r\n            // Retrieve the authentication token from local storage\r\n            const token = localStorage.getItem('token');\r\n\r\n            // Retrieve the username from local storage or wherever it's stored\r\n            const username = localStorage.getItem('username'); // Replace with your actual way of getting the username\r\n\r\n            // Create an Axios instance with the token in the headers\r\n            const axiosInstance = axios.create({\r\n                baseURL: 'https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/api/',\r\n                headers: {\r\n                    Authorization: `Token ${token}`, // Include the token in the headers\r\n                },\r\n            });\r\n\r\n            // Make a GET request to your Django backend API using the Axios instance\r\n            const response = await axiosInstance.get(`posts-by-author/${username}/`);\r\n\r\n            // Extract the confessions data from the API response\r\n            const confessionsData = response.data.map((confession) => ({\r\n                ...confession,\r\n                backgroundColor: getColorSet(confession.color_code)[0],\r\n                post_id: confession.id,// Get the background color based on color_code\r\n            }));\r\n\r\n            // Once you have the modified data, you can set it to your component's state\r\n            setConfessions(confessionsData);\r\n\r\n            const commentCountPromises = confessionsData.map((post) => {\r\n                return axios\r\n                    .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/comments_on_post/${post.id}/`, {\r\n                        headers: {\r\n                            Authorization: `Token ${token}`,\r\n                        },\r\n                    })\r\n                    .then((response) => {\r\n                        const count = response.data.length;\r\n                        return { postId: post.id, count };\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error fetching comment count:', error);\r\n                        return { postId: post.id, count: 0 };\r\n                    });\r\n            });\r\n\r\n            Promise.all(commentCountPromises)\r\n                .then((counts) => {\r\n                    // Create an object with post IDs as keys and comment counts as values\r\n                    const commentCountsObject = {};\r\n                    counts.forEach((countObj) => {\r\n                        commentCountsObject[countObj.postId] = countObj.count;\r\n                    });\r\n                    setCommentCounts(commentCountsObject);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error fetching comment counts:', error);\r\n                });\r\n        } catch (error) {\r\n            console.error('Error fetching confessions:', error);\r\n        }\r\n    };\r\n\r\n    const handleCommentSubmit = () => {\r\n        if (newComment.trim() === '') {\r\n            return; // Prevent posting empty comments\r\n        }\r\n\r\n        const commentData = {\r\n            comment: newComment,\r\n            post_id: selectedConfessionId, // Use the selected post's ID\r\n        };\r\n\r\n        // Make a POST request to the API endpoint with token authentication\r\n        axios\r\n            .post('https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/', commentData, {\r\n                headers: {\r\n                    Authorization: `Token ${token}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                // Handle successful comment submission\r\n                // console.log('Comment posted successfully:', response.data);\r\n\r\n                // Step 1: Add the new comment to the selectedConfessionComments state\r\n                const newCommentData = {\r\n                    ...response.data,\r\n                    user_commented: user, // Add user details to the comment\r\n                };\r\n                setSelectedConfessionComments([...selectedConfessionComments, newCommentData]);\r\n\r\n                // Step 2: Update the comment count for the selected post\r\n                setCommentCounts((prevCounts) => ({\r\n                    ...prevCounts,\r\n                    [selectedConfessionId]: (prevCounts[selectedConfessionId] || 0) + 1,\r\n                }));\r\n\r\n                // Clear the comment input field\r\n                setNewComment('');\r\n\r\n                // Refresh the page to show the updated comments\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error posting comment:', error);\r\n            });\r\n    };\r\n\r\n    const fetchUserId = () => {\r\n        const username = localStorage.getItem('username');\r\n        const apiUrl = `https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/users/by-username/${username}/`;\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                // Extract the user ID from the response\r\n                const userId = response.data.id;\r\n\r\n                // Call the fetchFriends function with the obtained user ID\r\n                fetchFriends(userId);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user ID:', error);\r\n            });\r\n    };\r\n\r\n    const handlepostmenuClick = (confessionId) => {\r\n        // Toggle the dropdown menu\r\n        setSelectedConfessionIdForMenu(confessionId);\r\n        setShowpostDropdown(!showpostDropdown);\r\n    };\r\n\r\n    const toggleCommentDropdown = (confession) => {\r\n        if (isCommentDropdownOpen) {\r\n            // Close the comment section\r\n            setCommentDropdownOpen(false);\r\n            setSelectedConfessionComments([]);\r\n            setSelectedConfessionId(null);\r\n        } else {\r\n            // Open the comment section\r\n            axios\r\n                .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/comments_on_post/${confession.id}/`, {\r\n                    headers: {\r\n                        Authorization: `Token ${token}`, // Include any required authentication headers\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    // Fetch user details for each comment\r\n                    const commentPromises = response.data.map((comment) => {\r\n                        return fetchUserDetails(comment.user_commented).then((userResponse) => {\r\n                            return {\r\n                                ...comment,\r\n                                user_commented: userResponse.data, // Replace user_commented ID with user details\r\n                            };\r\n                        });\r\n                    });\r\n\r\n                    // Wait for all user detail requests to complete\r\n                    Promise.all(commentPromises)\r\n                        .then((commentsWithUsers) => {\r\n                            setSelectedConfessionComments(commentsWithUsers);\r\n                            setSelectedConfessionId(confession.id);\r\n                            setCommentDropdownOpen(true);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error fetching comments:', error);\r\n                        });\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error fetching comments:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n    const fetchUserDetails = (userId) => {\r\n        return axios.get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/users/${userId}/`, {\r\n            headers: {\r\n                Authorization: `Token ${token}`,\r\n            },\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const counts = {};\r\n        user.confessions.forEach((confession) => {\r\n            const comments = user.comments.filter((comment) => comment.post_id === confession.id);\r\n            counts[confession.id] = comments.length;\r\n        });\r\n        setCommentCounts(counts);\r\n    }, [user.confessions, user.comments]);\r\n    const formatCommentCount = (count) => {\r\n        if (count < 1000) {\r\n            return count.toString();\r\n        } else if (count < 1000000) {\r\n            return (count / 1000).toFixed(1) + 'K';\r\n        } else {\r\n            return (count / 1000000).toFixed(1) + 'M';\r\n        }\r\n    };\r\n\r\n    const handleCommentInputChange = (event) => {\r\n        setNewComment(event.target.value);\r\n    };\r\n\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const username = localStorage.getItem('username');\r\n\r\n            // First, fetch user data from the first endpoint\r\n            const firstEndpointResponse = await axios.get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/profile-pics/by-username/${username}/`, {\r\n                headers: {\r\n                    Authorization: `Token ${token}`,\r\n                },\r\n            });\r\n\r\n            const userProfileData = firstEndpointResponse.data;\r\n\r\n            // Then, use the 'user' ID from the first endpoint to fetch the user's name from the second endpoint\r\n            const secondEndpointResponse = await axios.get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/users/${userProfileData.user}/`, {\r\n                headers: {\r\n                    Authorization: `Token ${token}`,\r\n                },\r\n            });\r\n\r\n            const userDataFromSecondEndpoint = secondEndpointResponse.data;\r\n\r\n            // Combine the first and last name to create the fullName\r\n            const fullName = `${userDataFromSecondEndpoint.first_name || ''} ${userDataFromSecondEndpoint.last_name || ''}`;\r\n\r\n            // Update the state with the user profile data\r\n            setUserData({\r\n                id: userProfileData.id,\r\n                bio: userProfileData.bio,\r\n                branch: userProfileData.branch,\r\n                profile_picture: userProfileData.profile_picture,\r\n                user: userProfileData.user,\r\n                fullName, // Use the corrected fullName\r\n                // Add other fields as needed\r\n            });\r\n        } catch (error) {\r\n            console.error('Error fetching user profile data:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConfession = () => {\r\n        if (selectedConfessionIdForMenu) {\r\n            // Send a DELETE request to the endpoint for deleting the post\r\n            axios\r\n                .delete(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/posts/${selectedConfessionIdForMenu}/`, {\r\n                    headers: {\r\n                        Authorization: `Token ${token}`,\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    // Handle successful post deletion (e.g., remove it from the state)\r\n                    // You can update the state here to remove the deleted post\r\n                    const updatedConfessions = confessions.filter((confession) => confession.id !== selectedConfessionIdForMenu);\r\n                    setConfessions(updatedConfessions);\r\n\r\n                    // Optionally, close the dropdown or perform any other necessary actions\r\n                    setShowpostDropdown(false);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error deleting post:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n\r\n\r\n    // Fetch user profile data when the component mounts\r\n    useEffect(() => {\r\n        fetchUserData();\r\n    }, []);\r\n\r\n\r\n\r\n    const fetchMentions = async () => {\r\n        try {\r\n            // Retrieve the authentication token from local storage\r\n            const token = localStorage.getItem('token');\r\n\r\n            // Retrieve the username from local storage or wherever it's stored\r\n            const username = localStorage.getItem('username'); // Replace with your actual way of getting the username\r\n\r\n            // Create an Axios instance with the token in the headers\r\n            const axiosInstance = axios.create({\r\n                baseURL: 'https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/api/',\r\n                headers: {\r\n                    Authorization: `Token ${token}`, // Include the token in the headers\r\n                },\r\n            });\r\n\r\n            // Make a GET request to your Django backend API using the Axios instance\r\n            const response = await axiosInstance.get(`mentioned-posts/${username}/`);\r\n\r\n            // Once you have the response, you can set it to your component's state\r\n            const mentionsWithColors = response.data.map((mention, index) => ({\r\n                ...mention,\r\n                colors: getColorSet(mention.color_code),\r\n                post_id: mention.id// Get the color set based on color_code\r\n            }));\r\n\r\n            setMentions(mentionsWithColors);\r\n\r\n            const commentCountPromises = mentionsWithColors.map((post) => {\r\n                return axios\r\n                    .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/comments_on_post/${post.id}/`, {\r\n                        headers: {\r\n                            Authorization: `Token ${token}`,\r\n                        },\r\n                    })\r\n                    .then((response) => {\r\n                        const count = response.data.length;\r\n                        return { postId: post.id, count };\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error fetching comment count:', error);\r\n                        return { postId: post.id, count: 0 };\r\n                    });\r\n            });\r\n\r\n            Promise.all(commentCountPromises)\r\n                .then((counts) => {\r\n                    // Create an object with post IDs as keys and comment counts as values\r\n                    const commentCountsObject = {};\r\n                    counts.forEach((countObj) => {\r\n                        commentCountsObject[countObj.postId] = countObj.count;\r\n                    });\r\n                    setCommentCounts(commentCountsObject);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error fetching comment counts:', error);\r\n                });\r\n        } catch (error) {\r\n            console.error('Error fetching mentions:', error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchMentions();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchConfessions();\r\n    }, []);\r\n\r\n    const getColorSet = (colorCode) => {\r\n        const colorMap = {\r\n            pink: ['#FC85BDB7', '#ff76b3'],\r\n            blue: ['#89E7FFB7', '#76cfff'],\r\n            red: ['#FF8989B7', '#FF7676FF'],\r\n            yellow: ['#FFF189B7', '#ffef76'],\r\n            purple: ['#AA89FFB7', '#9b76ff'],\r\n            green: ['#88FD88B7', '#76fd76'],\r\n        };\r\n\r\n        return colorMap[colorCode] || colorMap['default']; // Provide a default color set if colorCode is not found\r\n    };\r\n\r\n\r\n\r\n    const formatTimeDifference = (confessionDate,mentionDate) => {\r\n        const currentDate = new Date();\r\n        const timeDifference = currentDate - new Date(confessionDate);\r\n\r\n        if (timeDifference < 60000) { // Less than 1 minute\r\n            return Math.floor(timeDifference / 1000) + \" s\";\r\n        } else if (timeDifference < 3600000) { // Less than 1 hour\r\n            return Math.floor(timeDifference / 60000) + \" m\";\r\n        } else if (timeDifference < 86400000) { // Less than 1 day\r\n            return Math.floor(timeDifference / 3600000) + \" h\";\r\n        } else { // More than 1 day\r\n            return Math.floor(timeDifference / 86400000) + \" d\";\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Update window width on resize\r\n        const handleResize = () => {\r\n            setWindowWidth(window.innerWidth);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n\r\n        const handleScroll = () => {\r\n            setShowStickyNote(window.scrollY <= 0); // Show sticky note when scrolling up\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        // Clean up event listener on unmount\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n    const getStickyNoteColor = (index) => {\r\n        // Replace this logic with your color generation or predefined colors\r\n        const colors = ['rgba(252,133,189,0.72)', 'rgba(137,231,255,0.72)', 'rgba(255,137,137,0.72)', 'rgba(255,241,137,0.72)', 'rgba(170,137,255,0.72)', 'rgba(136,253,136,0.72)',];\r\n        return colors[index % colors.length];\r\n    };\r\n    const getStickyNoteColor1 = (index) => {\r\n        // Replace this logic with your color generation or predefined colors\r\n        const colors = ['#ff76b3', '#76cfff', '#FF7676FF', '#ffef76', '#9b76ff', '#76fd76',];\r\n        return colors[index % colors.length];\r\n    };\r\n    const handleUnfriend = (friendshipId, friendName) => {\r\n        // Send a PUT request to update the friendship status\r\n        const apiUrl = `https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/friendships/${friendshipId}/`;\r\n\r\n        axios\r\n            .put(apiUrl, { status: \"unfriended\" })\r\n            .then((response) => {\r\n                // Check if the PUT request was successful\r\n                if (response.status === 200) {\r\n                    // Remove the friend from the filteredFriends array\r\n                    const updatedFilteredFriends = filteredFriends.filter((friend) => friend.fullName !== friendName);\r\n                    setFilteredFriends(updatedFilteredFriends);\r\n                } else {\r\n                    console.error('Error unfriending friend:', response.statusText);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error unfriending friend:', error);\r\n            });\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const query = e.target.value;\r\n        setSearchQuery(query);\r\n        filterFriends(query);\r\n    };\r\n\r\n    const filterFriends = (query) => {\r\n        const filtered = user.friends.filter((friend) =>\r\n            friend.name.toLowerCase().includes(query.toLowerCase())\r\n        );\r\n        setFilteredFriends(filtered);\r\n    };\r\n    const handleSettingsClick = () => {\r\n        // Toggle the dropdown menu\r\n        setShowDropdown(!showDropdown);\r\n    };\r\n\r\n    const handleAboutClick = () => {\r\n        // Toggle the About options\r\n        setShowAboutOptions(!showAboutOptions);\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        // Implement your logout logic here\r\n        // For example, clear user session, redirect, etc.\r\n        console.log('Logout clicked');\r\n    };\r\n\r\n    const handleLikeDislike = (confessionId) => {\r\n        const newLikeState = { ...likeState };\r\n        newLikeState[confessionId] = !newLikeState[confessionId];\r\n        setLikeState(newLikeState);\r\n    };\r\n\r\n    // Function to fetch friends data\r\n    const fetchFriends = (userId) => {\r\n        // Construct the URL with the user's ID\r\n        const apiUrl = `https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/user-friends/${userId}/`;\r\n\r\n        axios\r\n            .get(apiUrl)\r\n            .then((response) => {\r\n                // Check if response.data is defined and is an array\r\n                if (Array.isArray(response.data)) {\r\n                    // Extract the list of friends from the response with a status of \"accepted\"\r\n                    const friendsList = response.data\r\n                        .filter((friendship) => friendship.status === \"accepted\")\r\n                        .map((friendship) => {\r\n                            // Check if friendship object contains 'user' and 'friend' properties\r\n                            if (friendship.user && friendship.friend) {\r\n                                const friendUser = friendship.friend.id === userId ? friendship.user : friendship.friend;\r\n                                // Check if friendUser object contains 'id', 'username', 'first_name', and 'last_name' properties\r\n                                if (friendUser.id && friendUser.username && friendUser.first_name && friendUser.last_name) {\r\n                                    const fullName = friendUser.first_name + ' ' + friendUser.last_name;\r\n                                    return {\r\n                                        id: friendUser.id,\r\n                                        username: friendUser.username,\r\n                                        fullName,\r\n                                        friendshipId: friendship.friendship_id, // Store the friendship_id\r\n                                    };\r\n                                } else {\r\n                                    console.error('Error fetching friends: Invalid friendUser data', friendUser);\r\n                                }\r\n                            } else {\r\n                                console.error('Error fetching friends: Invalid friendship data', friendship);\r\n                            }\r\n                        });\r\n\r\n                    // Remove undefined items from the friendsList array\r\n                    const filteredFriendsList = friendsList.filter((friend) => friend);\r\n\r\n                    // Update the state with the list of friends\r\n                    setFilteredFriends(filteredFriendsList);\r\n                } else {\r\n                    // Handle the case where response.data is not an array\r\n                    console.error('Error fetching friends: Response data is not an array', response.data);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching friends:', error);\r\n            });\r\n    };\r\n\r\n\r\n\r\n    // Fetch friends data when the component is mounted\r\n    useEffect(() => {\r\n        fetchUserId();\r\n    }, [username]);\r\n\r\n\r\n    const handleEditProfileClick = () => {\r\n        setShowEditProfileForm(true);\r\n    };\r\n\r\n    const handleEditProfileCancel = () => {\r\n        setShowEditProfileForm(false);\r\n    };\r\n\r\n    const handleProfilePicChange = (e) => {\r\n        const file = e.target.files[0];\r\n        // You can add code here to upload the selected profile picture to a server or display it on the page.\r\n        setProfilePic(file);\r\n    };\r\n\r\n    const handleNameChange = (e) => {\r\n        setNewName(e.target.value);\r\n    };\r\n\r\n    const handleBioChange = (e) => {\r\n        setNewBio(e.target.value);\r\n    };\r\n\r\n    return (\r\n\r\n        <div style={{ marginBottom: windowWidth <= 768 ? '60px' : '0' }}>\r\n            <img src={menuIcon} alt=\"Settings\" style={{ position: 'absolute', top: '10px', right: '10px', cursor: 'pointer',width: '30px', height: '30px' }} onClick={handleSettingsClick} /><br/>\r\n            <p style={{fontFamily: 'Helvetica', fontSize: '30px'}}><b>{userData ? userData.fullName : 'Loading...'}</b> </p>\r\n            <div style={{ position: 'relative' }}>\r\n                <img src={userData ? userData.profile_picture : 'Loading...'} style={{boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',width: '70px', height: '70px', borderRadius: '50%', position:'absolute', top: '-60px', right: '14px'}}/>\r\n                <br/>\r\n                <p style={{fontFamily: 'Helvetica',position:'absolute', top: '-35px'}}>{userData ? userData.branch : 'Loading...'}</p>\r\n                <p style={{fontFamily: 'Helvetica',position:'absolute', top: '-10px'}}>{userData ? userData.bio : 'Loading...'}</p>\r\n            </div>\r\n\r\n            {showDropdown && (\r\n                <div style={{overflowY:'scroll',position: 'fixed', bottom: -1, left: 0, height:'50%',width: '100%', backgroundColor: 'white',  zIndex: '100',borderTopRightRadius:'20px',borderTopLeftRadius:'20px', border:'0px solid #000',boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)'}}>\r\n                    <ul style={{ listStyle: 'none', padding: '0' }}>\r\n                        <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'black' }} onClick={handleEditProfileClick}>Edit profile</li>\r\n                        {showEditProfileForm && (\r\n                            <form   style={{  overflowY:'scroll',position: 'fixed', bottom: -1, left: 0, height:'99%',width: '100%', backgroundColor: 'white',  zIndex: '100',borderTopRightRadius:'20px',borderTopLeftRadius:'20px', border:'0px solid #000',boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)' }}>\r\n                                {/* Edit Profile Form */}\r\n                                <img src={CrossIcon} style={{position: 'absolute', top: '20px', right: '20px', height:'20px',width:'20px'}} onClick={handleEditProfileCancel}/>\r\n\r\n                                <input\r\n                                    type=\"file\"\r\n                                    id=\"fileInput\"\r\n                                    accept=\"image/*\"\r\n                                    onChange={handleProfilePicChange}\r\n                                    style={{\r\n                                        display: 'none',\r\n\r\n                                    }}\r\n                                />\r\n                                <label htmlFor=\"fileInput\">\r\n                                    <img\r\n                                        src={profilePic || user.image}\r\n                                        style={{\r\n                                            boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                            marginBottom: '15px',\r\n                                            fontFamily: 'Helvetica',\r\n                                            width: '150px',\r\n                                            height: '150px',\r\n                                            background: 'rgba(255, 252, 255, 0.5)',\r\n                                            border: '1px solid #ccc',\r\n                                            fontSize: '10px',\r\n                                            zIndex: '1',\r\n                                            borderRadius: '50%',\r\n                                            position:'absolute',\r\n                                            left: '50%',\r\n                                            top: '15%',\r\n                                            transform: 'translate(-50%, -50%)'\r\n                                        }}\r\n                                    />\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Name\"\r\n                                    value={newName}\r\n                                    onChange={handleNameChange}\r\n                                    style={{boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                        marginBottom: '15px',\r\n                                        position:'absolute',\r\n                                        left: '50%',\r\n                                        top: '30%',\r\n                                        transform: 'translate(-50%, -50%)',\r\n                                        paddingLeft: '18px',\r\n                                        fontFamily: 'Helvetica',\r\n                                        width: 'calc(90% - 25px)',\r\n                                        height: '40px',\r\n                                        background: 'rgba(255, 255, 255, 0.5)',\r\n                                        border: '1px solid #ccc',\r\n                                        fontSize: '18px',\r\n                                        zIndex: '1',\r\n                                        borderRadius: '11px',}}\r\n                                />\r\n                                <textarea\r\n                                    placeholder=\"Bio\"\r\n                                    value={newBio}\r\n                                    onChange={handleBioChange}\r\n                                    style={{boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                        marginBottom: '15px',\r\n                                        paddingLeft: '18px',\r\n                                        position:'absolute',\r\n                                        left: '50%',\r\n                                        top: '41%',\r\n                                        transform: 'translate(-50%, -50%)',\r\n                                        fontFamily: 'Helvetica',\r\n                                        width: 'calc(90% - 25px)',\r\n                                        height: '100px',\r\n                                        background: 'rgba(255, 255, 255, 0.5)',\r\n                                        border: '1px solid #ccc',\r\n                                        fontSize: '18px',\r\n                                        zIndex: '1',\r\n                                        borderRadius: '11px',}}\r\n                                />\r\n                                {/* Include the code to submit the updated profile information */}\r\n                                <button type=\"submit\"\r\n                                        style={{  position:'absolute', left: '50%', top: '52%',\r\n                                            transform: 'translate(-50%, -50%)',boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',color:'#fff', fontFamily: 'Helvetica', width: '100px', height: '40px',background:'#000',border:'1px solid #ccc',fontSize:'18px',borderRadius: '11px',}}\r\n                                >Save</button>\r\n                            </form>\r\n                        )}\r\n                        <li style={{ padding: '15px', cursor: 'pointer', fontFamily: 'Helvetica', fontSize: '18px', color: 'black' }} onClick={handleAboutClick}>About</li>\r\n                        {showAboutOptions && (\r\n                            <div style={{position: 'relative', top: '0px', left: 0, height:'150px',width: '100%', backgroundColor: 'white',  zIndex: '100',borderRadius:'11px', border:'0px solid #000',boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)'}}>\r\n                                <ul style={{ listStyle: 'none', padding: '0' }}>\r\n                                    <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'black' }} onClick={handleLogout}>About RVConnect</li>\r\n                                    <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'black' }} onClick={handleLogout}>Terms of Use</li>\r\n                                    <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'black' }} onClick={handleLogout}>Privacy Policy</li>\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                        <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'red' }} onClick={handleLogout}>Log out</li>\r\n                        {/* Add other options here */}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n\r\n\r\n            <div style={{ display: 'flex', marginTop: '20px' , justifyContent: 'space-between',width: '100%', }}>\r\n\r\n                <div\r\n                    className={`tab ${activeTab === 'confessions' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('confessions')}\r\n                    style={{\r\n                        flex: 1,\r\n                        fontFamily: 'Helvetica', fontSize: '20px',\r\n                        textAlign: 'center',\r\n                        color: activeTab === 'confessions' ? '#000' : '#c0c0c0',\r\n                    }}\r\n\r\n                >\r\n                    <b>Confessions</b>\r\n                </div>\r\n\r\n                <div\r\n                    className={`tab ${activeTab === 'mentioned' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('mentioned')}\r\n                    style={{\r\n                        flex: 1,\r\n                        fontFamily: 'Helvetica', fontSize: '20px',\r\n                        textAlign: 'center',\r\n                        color: activeTab === 'mentioned' ? '#000' : '#c0c0c0',\r\n                    }}\r\n\r\n                >\r\n                    <b>Mentions</b>\r\n                </div>\r\n\r\n                <div\r\n                    className={`tab ${activeTab === 'friends' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('friends')}\r\n                    style={{\r\n                        flex: 1,\r\n                        fontFamily: 'Helvetica', fontSize: '20px',\r\n                        textAlign: 'center',\r\n                        color: activeTab === 'friends' ? '#000' : '#c0c0c0',}}\r\n                >\r\n                    <b>Friends</b>\r\n                </div>\r\n\r\n            </div>\r\n            <hr />\r\n\r\n            {activeTab === 'confessions' && (\r\n                <>\r\n                    {confessions.slice().reverse().map((confession, index) => {\r\n                        // Get the color set based on the color code from the API response\r\n                        const colorSet = getColorSet(confession.color_code);\r\n\r\n                        // Destructure the color set to get the two colors\r\n                        const [backgroundColor, backgroundColor1] = colorSet || [];\r\n\r\n                        return (\r\n                            <div key={index} style={{\r\n                                borderRadius: '11px',\r\n                                borderBottomLeftRadius: '30px',\r\n                                background: backgroundColor || getStickyNoteColor(index),\r\n                                position: 'relative',\r\n                                top: '0',\r\n                                zIndex: 'auto',\r\n                                border: '0px solid #000',\r\n                                padding: '10px',\r\n                                margin: '10px',\r\n                                maxWidth: '100%',\r\n                                boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                whiteSpace: 'pre-line', /* Allow text to wrap to the next line */\r\n                                overflow: 'hidden', /* Hide overflowing text */\r\n                                overflowWrap: 'break-word',\r\n                                display: selectedConfessionId === confession.id || !isCommentDropdownOpen ? 'block' : 'none',\r\n                            }}>\r\n                                <div style={{ zIndex: '1', fontFamily: 'Helvetica', position: 'relative' }}>\r\n                                    <p style={{\r\n                                        position: 'absolute',\r\n                                        top: '-15px',\r\n                                        right: '4px',\r\n                                        color: '#000',\r\n                                        fontFamily: 'Helvetica'\r\n                                    }}>{formatTimeDifference(confession.date_posted)}</p>\r\n\r\n                                    <button\r\n                                        onClick={() => handlepostmenuClick(confession.id)}\r\n                                        style={{ backgroundColor: 'transparent', border: 'none' }}\r\n                                    >\r\n                                        <img src={postmenuIcon} style={{ position: 'relative', cursor: 'pointer', width: '25px', height: '25px', marginRight: '10px' }} />\r\n                                    </button>\r\n\r\n                                    {showpostDropdown && (\r\n                                        <div  ref={dropdownRef}\r\n                                              style={{overflowY:'scroll',position: 'fixed', bottom: -1, left: 0, height:'50%',width: '100%', backgroundColor: 'white',  zIndex: '100',borderTopRightRadius:'20px',borderTopLeftRadius:'20px', border:'0px solid #000',boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)'}}>\r\n                                            <ul style={{ listStyle: 'none', padding: '0' }}>\r\n                                                <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'#ff4b4b' }}  onClick={() => handleDeleteConfession(confession.id)}><b>Delete</b></li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    <button\r\n                                        onClick={() => handleLikeDislike(confession.id)}\r\n                                        style={{ backgroundColor: 'transparent', border: 'none' }}\r\n                                    >\r\n                                        {likeState[confession.id] ? <img src={likeicon} style={{ height: '25px', width: '25px' }} /> : <img src={dislikeicon} style={{ height: '25px', width: '25px' }} />}\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => toggleCommentDropdown(confession)}\r\n                                        style={{\r\n                                            backgroundColor: 'transparent',\r\n                                            border: 'none',\r\n                                        }}>\r\n                                        <img src={commenticon} style={{ height: '25px', width: '25px' }} />\r\n                                        <span style={{ marginLeft: '4px', fontFamily: 'Helvetica', position: 'relative', top: '-7px' }}>\r\n                {formatCommentCount(commentCounts[confession.id] || 0)}\r\n              </span>\r\n                                    </button>\r\n                                    {isCommentDropdownOpen && selectedConfessionComments.length > 0 && (\r\n                                        <div style={{\r\n                                            bottom: 60,\r\n                                            overflowY: 'scroll',\r\n                                            position: 'fixed',\r\n                                            left: 0,\r\n                                            height: '43%',\r\n                                            width: '100%',\r\n                                            backgroundColor: 'white',\r\n                                            zIndex: '100',\r\n                                            borderTopRightRadius: '20px',\r\n                                            borderTopLeftRadius: '20px',\r\n                                            border: '0px solid #000',\r\n                                            boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)',\r\n                                        }}>\r\n                                            {selectedConfessionComments.map((comment) => (\r\n                                                <div style={{\r\n                                                    padding: '0px 0',\r\n                                                    borderBottom: '1px solid #ccc',\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                }}>\r\n                                                    <img src={comment.user_commented.profilepic} style={{\r\n                                                        minWidth: '40px',\r\n                                                        width: '40px',\r\n                                                        height: '40px',\r\n                                                        borderRadius: '50%',\r\n                                                        marginLeft: '15px',\r\n                                                        backgroundColor: '#000',\r\n                                                        position: 'relative',\r\n                                                        top: '-50px'\r\n                                                    }} />\r\n                                                    <div key={comment.id} style={{\r\n                                                        padding: '15px',\r\n                                                        whiteSpace: 'pre-line',\r\n                                                        overflow: 'hidden',\r\n                                                        overflowWrap: 'break-word',\r\n                                                    }}>\r\n                                                        <p style={{\r\n                                                            fontFamily: 'Helvetica',\r\n                                                            color: '#000',\r\n                                                            fontSize: '17px',\r\n                                                            position: 'relative',\r\n                                                            top: '4px',\r\n                                                        }}><b>{comment.user_commented.first_name + comment.user_commented.last_name}</b></p>\r\n                                                        <p style={{\r\n                                                            fontFamily: 'Helvetica',\r\n                                                            color: '#8f8f8f',\r\n                                                            position: 'relative',\r\n                                                            top: '-10px',\r\n                                                            fontSize: '17px',\r\n                                                        }}>@{comment.user_commented.username}</p>\r\n                                                        <p style={{\r\n                                                            fontFamily: 'Helvetica',\r\n                                                            position: 'relative',\r\n                                                            top: '-10px',\r\n                                                            fontSize: '17px',\r\n                                                            maxWidth: '90%',\r\n                                                        }}>{comment.comment}</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    )}\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <p style={{\r\n                                            fontFamily: 'Helvetica',\r\n                                            position: 'relative',\r\n                                            left: '27px',\r\n                                            top: '-10px',\r\n                                            maxWidth: '87%',\r\n                                        }}>\r\n                <span dangerouslySetInnerHTML={{\r\n                    __html: confession.content.replace(\r\n                        /@(\\w+)/g,\r\n                        (match, username) => `<b>@${username}</b>`\r\n                    )\r\n                }} />\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{\r\n                                    borderBottom: '3px solid #000',\r\n                                    borderRight: '1px solid #000',\r\n                                    borderTopRightRadius: '0px',\r\n                                    borderTopLeftRadius: '30px',\r\n                                    borderBottomRightRadius: '11px',\r\n                                    borderBottomLeftRadius: '2px',\r\n                                    position: 'absolute',\r\n                                    bottom: '-0.4px',\r\n                                    left: '30.5px',\r\n                                    width: '30px',\r\n                                    height: '31px',\r\n                                    background: backgroundColor1 || getStickyNoteColor1(index),\r\n                                    clipPath: 'polygon(0% 100%, 100% 100%, 100% 0%, 0% 0%, 0% 75%)',\r\n                                    zIndex: '0',\r\n                                    transform: 'rotate(-83.6deg)',\r\n                                    transformOrigin: 'bottom left',\r\n                                }}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            {/* Bottom Navigation */}\r\n            {isCommentDropdownOpen ? (\r\n                <div style={{ zIndex: '100', position: 'fixed', bottom: '10px', left: '0px', right: '0px' }}>\r\n                    <div style={{ background: '#fff', boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)', borderRadius: '11px', height: '155px', zIndex: '100', width: '100%', position: 'relative', top: '70px' }}>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your comment\"\r\n                            style={{\r\n                                resize: 'none',\r\n                                whiteSpace: 'pre-wrap',\r\n                                overflowWrap: 'break-word',\r\n                                paddingBottom: '0px',\r\n                                paddingLeft: '18.5px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 21px)',\r\n                                height: '40px',\r\n                                background: 'transparent',\r\n                                border: '0px solid #ccc',\r\n                                fontSize: '20px',\r\n                                borderRadius: '0px',\r\n                                position: 'relative',\r\n                                top: '10px',\r\n                            }}\r\n                            value={newComment} // Bind the value to the state\r\n                            onChange={handleCommentInputChange} // Step 2: Attach the event handler\r\n                        />\r\n                        <button\r\n                            onClick={handleCommentSubmit} // Step 3: Attach the event handler\r\n                            style={{ float: 'right', right: '10px', position: 'relative', bottom: '-12px', backgroundColor: '#000', color: '#fff', border: 'none', borderRadius: '11px', padding: '6px 12px', fontSize: '15px', cursor: 'pointer', fontFamily: 'Helvetica' }}\r\n                        >\r\n                            <b>Comment</b>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                // Render your bottom navigation when the dropdown is closed\r\n                <div style={{ position: 'fixed', bottom: '0', left: '0', right: '0', backgroundColor: '#333' }}>\r\n                </div>\r\n            )}\r\n\r\n\r\n            {activeTab === 'mentioned' && (\r\n                <>\r\n                    {mentions.slice().reverse().map((mention, index) => (\r\n                        <div key={index} style={{\r\n                            borderRadius: '11px',\r\n                            borderBottomLeftRadius: '30px',\r\n                            background: mention.colors[0], // Use the first color from the colors array\r\n                            position: 'relative',\r\n                            top: '0',\r\n                            zIndex: 'auto',\r\n                            border: '0px solid #000',\r\n                            padding: '10px',\r\n                            margin: '10px',\r\n                            maxWidth: '100%',\r\n                            boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                            whiteSpace: 'pre-line', /* Allow text to wrap to the next line */\r\n                            overflow: 'hidden', /* Hide overflowing text */\r\n                            overflowWrap: 'break-word',\r\n                            display: selectedConfessionId === mention.id || !isCommentDropdownOpen ? 'block' : 'none',\r\n                        }}>\r\n                            <div style={{ zIndex: '1', fontFamily: 'Helvetica', position: 'relative' }}>\r\n                                <p style={{\r\n                                    position: 'absolute',\r\n                                    top: '-15px',\r\n                                    right: '4px',\r\n                                    color: '#000',\r\n                                    fontFamily: 'Helvetica'\r\n                                }}>{formatTimeDifference(mention.date_posted)}</p>\r\n\r\n                                <button\r\n                                    onClick={() => handlepostmenuClick(mention.id)}\r\n                                    style={{ backgroundColor: 'transparent', border: 'none' }}\r\n                                >\r\n                                    <img src={postmenuIcon} style={{ position: 'relative', cursor: 'pointer', width: '25px', height: '25px', marginRight: '10px' }} />\r\n                                </button>\r\n\r\n                                {showpostDropdown && (\r\n                                    <div  ref={dropdownRef}\r\n                                          style={{overflowY:'scroll',position: 'fixed', bottom: -1, left: 0, height:'50%',width: '100%', backgroundColor: 'white',  zIndex: '100',borderTopRightRadius:'20px',borderTopLeftRadius:'20px', border:'0px solid #000',boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)'}}>\r\n                                        <ul style={{ listStyle: 'none', padding: '0' }}>\r\n                                            <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'#ff4b4b' }}  onClick={() => handleDeleteConfession(mention.id)}><b>Delete</b></li>\r\n                                        </ul>\r\n                                    </div>\r\n                                )}\r\n\r\n                                <button\r\n                                    onClick={() => handleLikeDislike(mention.id)}\r\n                                    style={{ backgroundColor: 'transparent', border: 'none', }}\r\n                                >\r\n                                    {likeState[mention.id] ? <img src={likeicon} style={{ height: '25px', width: '25px' }} /> : <img src={dislikeicon} style={{ height: '25px', width: '25px' }} />}\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => toggleCommentDropdown(mention)}\r\n                                    style={{\r\n                                        backgroundColor: 'transparent',\r\n                                        border: 'none',\r\n                                    }}>\r\n                                    <img src={commenticon} style={{ height: '25px', width: '25px' }} />\r\n                                    <span style={{ marginLeft: '4px', fontFamily: 'Helvetica', position: 'relative', top: '-7px' }}>\r\n                            {formatCommentCount(commentCounts[mention.id] || 0)}\r\n                        </span>\r\n                                </button>\r\n                                {isCommentDropdownOpen && selectedConfessionComments.length > 0 && (\r\n                                    <div style={{\r\n                                        bottom: 60,\r\n                                        overflowY: 'scroll',\r\n                                        position: 'fixed',\r\n                                        left: 0,\r\n                                        height: '43%',\r\n                                        width: '100%',\r\n                                        backgroundColor: 'white',\r\n                                        zIndex: '100',\r\n                                        borderTopRightRadius: '20px',\r\n                                        borderTopLeftRadius: '20px',\r\n                                        border: '0px solid #000',\r\n                                        boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)',\r\n                                    }}>\r\n                                        {selectedConfessionComments.map((comment) => (\r\n                                            <div style={{\r\n                                                padding: '0px 0',\r\n                                                borderBottom: '1px solid #ccc',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                            }}>\r\n                                                <img src={comment.user_commented.profilepic} style={{\r\n                                                    minWidth: '40px',\r\n                                                    width: '40px',\r\n                                                    height: '40px',\r\n                                                    borderRadius: '50%',\r\n                                                    marginLeft: '15px',\r\n                                                    backgroundColor: '#000',\r\n                                                    position: 'relative',\r\n                                                    top: '-50px'\r\n                                                }} />\r\n                                                <div key={comment.id} style={{\r\n                                                    padding: '15px',\r\n                                                    whiteSpace: 'pre-line',\r\n                                                    overflow: 'hidden',\r\n                                                    overflowWrap: 'break-word',\r\n                                                }}>\r\n                                                    <p style={{\r\n                                                        fontFamily: 'Helvetica',\r\n                                                        color: '#000',\r\n                                                        fontSize: '17px',\r\n                                                        position: 'relative',\r\n                                                        top: '4px',\r\n                                                    }}>\r\n                                                        <b>{comment.user_commented.first_name + comment.user_commented.last_name}</b>\r\n                                                    </p>\r\n                                                    <p style={{\r\n                                                        fontFamily: 'Helvetica',\r\n                                                        color: '#8f8f8f',\r\n                                                        position: 'relative',\r\n                                                        top: '-10px',\r\n                                                        fontSize: '17px',\r\n                                                    }}>@{comment.user_commented.username}</p>\r\n                                                    <p style={{\r\n                                                        fontFamily: 'Helvetica',\r\n                                                        position: 'relative',\r\n                                                        top: '-10px',\r\n                                                        fontSize: '17px',\r\n                                                        maxWidth: '90%',\r\n                                                    }}>{comment.comment}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                )}\r\n                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                    <p style={{\r\n                                        fontFamily: 'Helvetica',\r\n                                        position: 'relative',\r\n                                        left: '27px',\r\n                                        top: '-10px',\r\n                                        maxWidth: '87%',\r\n                                    }}>\r\n                            <span dangerouslySetInnerHTML={{\r\n                                __html: mention.content.replace(\r\n                                    /@(\\w+)/g,\r\n                                    (match, username) => `<b>@${username}</b>`\r\n                                )\r\n                            }} />\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{\r\n                                borderBottom: '3px solid #000',\r\n                                borderRight: '1px solid #000',\r\n                                borderTopRightRadius: '0px',\r\n                                borderTopLeftRadius: '30px',\r\n                                borderBottomRightRadius: '11px',\r\n                                borderBottomLeftRadius: '2px',\r\n                                position: 'absolute',\r\n                                bottom: '-0.4px',\r\n                                left: '30.5px',\r\n                                width: '30px',\r\n                                height: '31px',\r\n                                background: mention.colors[1], // Use the second color from the colors array\r\n                                clipPath: 'polygon(0% 100%, 100% 100%, 100% 0%, 0% 0%, 0% 75%)',\r\n                                zIndex: '0',\r\n                                transform: 'rotate(-83.6deg)',\r\n                                transformOrigin: 'bottom left',\r\n                            }}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </>\r\n            )}\r\n\r\n\r\n            {/* Bottom Navigation */}\r\n            {isCommentDropdownOpen ? (\r\n                <div style={{ zIndex: '100', position: 'fixed', bottom: '10px', left: '0px', right: '0px' }}>\r\n                    <div style={{ background: '#fff', boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)', borderRadius: '11px', height: '155px', zIndex: '100', width: '100%', position: 'relative', top: '70px' }}>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your comment\"\r\n                            style={{\r\n                                resize: 'none',\r\n                                whiteSpace: 'pre-wrap',\r\n                                overflowWrap: 'break-word',\r\n                                paddingBottom: '0px',\r\n                                paddingLeft: '18.5px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 21px)',\r\n                                height: '40px',\r\n                                background: 'transparent',\r\n                                border: '0px solid #ccc',\r\n                                fontSize: '20px',\r\n                                borderRadius: '0px',\r\n                                position: 'relative',\r\n                                top: '10px',\r\n                            }}\r\n                            value={newComment} // Bind the value to the state\r\n                            onChange={handleCommentInputChange} // Step 2: Attach the event handler\r\n                        />\r\n                        <button\r\n                            onClick={handleCommentSubmit} // Step 3: Attach the event handler\r\n                            style={{ float: 'right', right: '10px', position: 'relative', bottom: '-12px', backgroundColor: '#000', color: '#fff', border: 'none', borderRadius: '11px', padding: '6px 12px', fontSize: '15px', cursor: 'pointer', fontFamily: 'Helvetica' }}\r\n                        >\r\n                            <b>Comment</b>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                // Render your bottom navigation when the dropdown is closed\r\n                <div style={{ position: 'fixed', bottom: '0', left: '0', right: '0', backgroundColor: '#333' }}>\r\n                </div>\r\n            )}\r\n\r\n\r\n\r\n            {activeTab === 'friends' && (\r\n                <>\r\n                    <div >\r\n\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            value={searchQuery}\r\n                            onChange={handleInputChange}\r\n                            style={{paddingLeft:'18px', fontFamily: 'Helvetica', width:'calc(100% - 22px)', height: '40px',background:'#efefef',border:'1px solid #ccc',fontSize:'20px',borderRadius: '11px',}}\r\n\r\n                        />\r\n                        {filteredFriends.map((friend, index) => (\r\n                            <div key={index} style={{ display: 'flex', alignItems: 'center', borderBottom: '1px solid #ccc', padding: '0px 0' }}>\r\n                                <img src={friend.image} style={{ width: '40px', height: '40px', borderRadius: '50%', marginRight: '10px' }} />\r\n                                <div style={{ flex: '1', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                    <div>\r\n                                        <p style={{ fontFamily: 'Helvetica', color: '#000', fontSize: '17px', position: 'relative', top: '4px', margin: '10px' }}><b>{friend.fullName}</b></p>\r\n                                        <p style={{ fontFamily: 'Helvetica', color: '#8f8f8f', position: 'relative', top: '-2px', fontSize: '17px', margin: '10px' }}>@{friend.username}</p>\r\n                                    </div>\r\n                                    <button style={{ fontFamily: 'Helvetica', backgroundColor: 'white', padding: '6px 10px', border: '1.2px solid #ccc', borderRadius: '10px', fontSize: '17px' }} onClick={() => handleUnfriend(friend.friendshipId)}><b>Unfriend</b></button>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            {/*{activeTab === 'clubs' && (*/}\r\n            {/*    <>*/}\r\n            {/*        /!* Render clubs content here *!/*/}\r\n            {/*    </>*/}\r\n            {/*)}*/}\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\Dashboard.js",["101","102","103","104","105","106","107","108","109","110","111"],[],"import React, { useState, useEffect,useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport homeIcon from './homeicon.png';\r\nimport searchIcon from './searchicon.png';\r\nimport postIcon from './posticon.png';\r\nimport profileIcon from './profileicon.png';\r\nimport rvclogo from './rvclogo.png';\r\nimport likeicon from './likeicon.png';\r\nimport dislikeicon from './dislikeicon.png';\r\nimport commenticon from './commenticon.png';\r\nimport postmenuIcon from \"./postmenuicon.png\";\r\n\r\nconst Dashboard = ({ user }) => {\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n    const [showStickyNote, setShowStickyNote] = useState(true);\r\n    const [likeState, setLikeState] = useState({});\r\n    const [posts, setPosts] = useState([]);\r\n    const [isCommentDropdownOpen, setCommentDropdownOpen] = useState(false);\r\n    const [selectedConfessionComments, setSelectedConfessionComments] = useState([]);\r\n    const [selectedConfessionId, setSelectedConfessionId] = useState(null);\r\n    const [commentCounts, setCommentCounts] = useState({});\r\n    const authToken = localStorage.getItem('token');\r\n    const [newComment, setNewComment] = useState('');\r\n    const [showpostDropdown, setShowpostDropdown] = useState(false);\r\n    const dropdownRef = useRef(null);\r\n    const loggedInUsername = localStorage.getItem('username'); // Get the currently logged-in user's username\r\n    const [mentionedPosts, setMentionedPosts] = useState([]);\r\n    const [userPosts, setUserPosts] = useState([]);\r\n\r\n    // Fetch the posts where the user is mentioned\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/api/mentioned-posts/${loggedInUsername}/`, {\r\n                headers: {\r\n                    Authorization: `Token ${authToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                const mentionedPosts = response.data;\r\n\r\n                // Update the state to include mentioned posts\r\n                setMentionedPosts(mentionedPosts);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching mentioned posts:', error);\r\n            });\r\n    }, [authToken, loggedInUsername]);\r\n\r\n    // Fetch the posts authored by the user\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/api/posts-by-author/${loggedInUsername}/`, {\r\n                headers: {\r\n                    Authorization: `Token ${authToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                const userPosts = response.data;\r\n\r\n                // Update the state to include user's posts\r\n                setUserPosts(userPosts);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching user posts:', error);\r\n            });\r\n    }, [authToken, loggedInUsername]);\r\n\r\n    const shouldShowPostMenuIcon = (postId) => {\r\n        // Check if the post is authored by the user or mentioned in mentionedPosts\r\n        const isUserPost = userPosts.some((post) => post.id === postId);\r\n        const isMentionedPost = mentionedPosts.some((post) => post.id === postId);\r\n\r\n        return isUserPost || isMentionedPost;\r\n    };\r\n\r\n    const handleCommentInputChange = (event) => {\r\n        setNewComment(event.target.value);\r\n    };\r\n\r\n    const handleCommentSubmit = () => {\r\n        if (newComment.trim() === '') {\r\n            return; // Prevent posting empty comments\r\n        }\r\n\r\n        const commentData = {\r\n            comment: newComment,\r\n            post_id: selectedConfessionId, // Use the selected post's ID\r\n        };\r\n\r\n        // Make a POST request to the API endpoint with token authentication\r\n        axios\r\n            .post('https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/', commentData, {\r\n                headers: {\r\n                    Authorization: `Token ${authToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                // Handle successful comment submission\r\n                // console.log('Comment posted successfully:', response.data);\r\n\r\n                // Step 1: Add the new comment to the selectedConfessionComments state\r\n                const newCommentData = {\r\n                    ...response.data,\r\n                    user_commented: user, // Add user details to the comment\r\n                };\r\n                setSelectedConfessionComments([...selectedConfessionComments, newCommentData]);\r\n\r\n                // Step 2: Update the comment count for the selected post\r\n                setCommentCounts((prevCounts) => ({\r\n                    ...prevCounts,\r\n                    [selectedConfessionId]: (prevCounts[selectedConfessionId] || 0) + 1,\r\n                }));\r\n\r\n                // Clear the comment input field\r\n                setNewComment('');\r\n\r\n                // Refresh the page to show the updated comments\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error posting comment:', error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n            if (showpostDropdown && dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n                setShowpostDropdown(false);\r\n\r\n            }\r\n        };\r\n\r\n        if (showpostDropdown) {\r\n            document.addEventListener('click', handleClickOutside);\r\n        } else {\r\n            document.removeEventListener('click', handleClickOutside);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside);\r\n        };\r\n    }, [showpostDropdown]);\r\n\r\n    const fetchUserDetails = (userId) => {\r\n        return axios.get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/users/${userId}/`, {\r\n            headers: {\r\n                Authorization: `Token ${authToken}`,\r\n            },\r\n        });\r\n    };\r\n\r\n    const formatTimeDifference = (confessionDate) => {\r\n        const currentDate = new Date();\r\n        const timeDifference = currentDate - new Date(confessionDate);\r\n\r\n        if (timeDifference < 60000) {\r\n            return Math.floor(timeDifference / 1000) + \" s\";\r\n        } else if (timeDifference < 3600000) {\r\n            return Math.floor(timeDifference / 60000) + \" m\";\r\n        } else if (timeDifference < 86400000) {\r\n            return Math.floor(timeDifference / 3600000) + \" h\";\r\n        } else {\r\n            return Math.floor(timeDifference / 86400000) + \" d\";\r\n        }\r\n    };\r\n\r\n    // Define a mapping between color names and color pairs\r\n    const colorMapping = {\r\n        pink: ['#FC85BDB7', '#ff76b3'],\r\n        blue: ['#89E7FFB7', '#76cfff'],\r\n        red: ['#FF8989B7', '#FF7676FF'],\r\n        yellow: ['#FFF189B7', '#ffef76'],\r\n        purple: ['#AA89FFB7', '#9b76ff'],\r\n        green: ['#88FD88B7', '#76fd76'],\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowWidth(window.innerWidth);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        const handleScroll = () => {\r\n            setShowStickyNote(window.scrollY <= 0);\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const authToken = localStorage.getItem('token');\r\n\r\n        axios\r\n            .get('https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/posts/', {\r\n                headers: {\r\n                    Authorization: `Token ${authToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                const postsWithColors = response.data.map((post) => {\r\n                    const colorPair = colorMapping[post.color_code] || ['#FFFFFF', '#FFFFFF']; // Default to white if color not found\r\n                    return {\r\n                        ...post,\r\n                        colorPair,\r\n                        post_id: post.id, // Add the post_id property\r\n                    };\r\n                });\r\n                setPosts(postsWithColors);\r\n\r\n                // Fetch comment counts for each post\r\n                const commentCountPromises = postsWithColors.map((post) => {\r\n                    return axios\r\n                        .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/comments_on_post/${post.id}/`, {\r\n                            headers: {\r\n                                Authorization: `Token ${authToken}`,\r\n                            },\r\n                        })\r\n                        .then((response) => {\r\n                            const count = response.data.length;\r\n                            return { postId: post.id, count };\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error fetching comment count:', error);\r\n                            return { postId: post.id, count: 0 };\r\n                        });\r\n                });\r\n\r\n                // Wait for all comment count requests to complete\r\n                Promise.all(commentCountPromises)\r\n                    .then((counts) => {\r\n                        // Create an object with post IDs as keys and comment counts as values\r\n                        const commentCountsObject = {};\r\n                        counts.forEach((countObj) => {\r\n                            commentCountsObject[countObj.postId] = countObj.count;\r\n                        });\r\n                        setCommentCounts(commentCountsObject);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error fetching comment counts:', error);\r\n                    });\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, [authToken]);\r\n\r\n    const handlepostmenuClick = () => {\r\n        // Toggle the dropdown menu\r\n        setShowpostDropdown(!showpostDropdown);\r\n    };\r\n\r\n    const handleDeleteConfession = (confessionId) => {\r\n        // Send a DELETE request to the endpoint for deleting the post\r\n        axios\r\n            .delete(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/posts/${confessionId}/`, {\r\n                headers: {\r\n                    Authorization: `Token ${authToken}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                // Handle successful post deletion (e.g., remove it from the state)\r\n                // You can update the state here to remove the deleted post\r\n                const updatedPosts = posts.filter((post) => post.id !== confessionId);\r\n                setPosts(updatedPosts);\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error deleting post:', error);\r\n            });\r\n    };\r\n\r\n\r\n    const handleLikeDislike = (confessionId) => {\r\n        const newLikeState = { ...likeState };\r\n        newLikeState[confessionId] = !newLikeState[confessionId];\r\n        setLikeState(newLikeState);\r\n    };\r\n\r\n    const toggleCommentDropdown = (confession) => {\r\n        if (isCommentDropdownOpen) {\r\n            // Close the comment section\r\n            setCommentDropdownOpen(false);\r\n            setSelectedConfessionComments([]);\r\n            setSelectedConfessionId(null);\r\n        } else {\r\n            // Open the comment section\r\n            axios\r\n                .get(`https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/comments/comments_on_post/${confession.id}/`, {\r\n                    headers: {\r\n                        Authorization: `Token ${authToken}`, // Include any required authentication headers\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    // Fetch user details for each comment\r\n                    const commentPromises = response.data.map((comment) => {\r\n                        return fetchUserDetails(comment.user_commented).then((userResponse) => {\r\n                            return {\r\n                                ...comment,\r\n                                user_commented: userResponse.data, // Replace user_commented ID with user details\r\n                            };\r\n                        });\r\n                    });\r\n\r\n                    // Wait for all user detail requests to complete\r\n                    Promise.all(commentPromises)\r\n                        .then((commentsWithUsers) => {\r\n                            setSelectedConfessionComments(commentsWithUsers);\r\n                            setSelectedConfessionId(confession.id);\r\n                            setCommentDropdownOpen(true);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error('Error fetching comments:', error);\r\n                        });\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error fetching comments:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const counts = {};\r\n        user.confessions.forEach((confession) => {\r\n            const comments = user.comments.filter((comment) => comment.post_id === confession.id);\r\n            counts[confession.id] = comments.length;\r\n        });\r\n        setCommentCounts(counts);\r\n    }, [user.confessions, user.comments]);\r\n    const formatCommentCount = (count) => {\r\n        if (count < 1000) {\r\n            return count.toString();\r\n        } else if (count < 1000000) {\r\n            return (count / 1000).toFixed(1) + 'K';\r\n        } else {\r\n            return (count / 1000000).toFixed(1) + 'M';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ marginBottom: windowWidth <= 768 ? '60px' : '0' }}>\r\n            <div style={{ height: '50px', display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '15px' }}>\r\n                <div>\r\n                    <img src={rvclogo} alt=\"RV Connected\" style={{ paddingTop: '10px', height: '150px', width: '150px' }} />\r\n                </div>\r\n            </div>\r\n            {posts.map((confession, index) => (\r\n                <div key={index} style={{\r\n                    borderRadius: '11px',\r\n                    borderBottomLeftRadius: '30px',\r\n                    background: confession.colorPair[0], // Use the first color from the pair\r\n                    position: 'relative',\r\n                    top: '0',\r\n                    zIndex: 'auto',\r\n                    border: '0px solid #000',\r\n                    padding: '10px',\r\n                    margin: '10px',\r\n                    maxWidth: '100%',\r\n                    boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                    whiteSpace: 'pre-line',\r\n                    overflow: 'hidden',\r\n                    overflowWrap: 'break-word',\r\n                    display: selectedConfessionId === confession.id || !isCommentDropdownOpen ? 'block' : 'none',\r\n                }}>\r\n                    <div style={{ zIndex: '1', fontFamily: 'Helvetica', position: 'relative' }}>\r\n                        <p style={{\r\n                            position: 'absolute',\r\n                            top: '-15px',\r\n                            right: '4px',\r\n                            color: '#000',\r\n                            fontFamily: 'Helvetica'\r\n                        }}>{formatTimeDifference(confession.date_posted)}</p>\r\n\r\n                        {shouldShowPostMenuIcon(confession.id) && (\r\n                            <button onClick={handlepostmenuClick} style={{ backgroundColor: 'transparent', border: 'none' }}>\r\n                                <img src={ postmenuIcon}  style={{ position: 'relative', cursor: 'pointer',width: '25px', height: '25px' ,marginRight:'10px'}}  /></button>\r\n                        )}\r\n                        {showpostDropdown && (\r\n                            <div  ref={dropdownRef}\r\n                                  style={{overflowY:'scroll',position: 'fixed', bottom: -1, left: 0, height:'50%',width: '100%', backgroundColor: 'white',  zIndex: '100',borderTopRightRadius:'20px',borderTopLeftRadius:'20px', border:'0px solid #000',boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)'}}>\r\n                                <ul style={{ listStyle: 'none', padding: '0' }}>\r\n                                    <li style={{ padding: '15px', cursor: 'pointer',fontFamily: 'Helvetica', fontSize: '18px', color:'#ff4b4b' }}  onClick={() => handleDeleteConfession(confession.id)}><b>Delete</b></li>\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n\r\n                        <button\r\n                            onClick={() => handleLikeDislike(confession.id)}\r\n                            style={{ backgroundColor: 'transparent', border: 'none' }}\r\n                        >\r\n                            {likeState[confession.id] ? <img src={likeicon} style={{ height: '25px', width: '25px' }} /> : <img src={dislikeicon} style={{ height: '25px', width: '25px' }} />}\r\n                        </button>\r\n                        <button\r\n                            onClick={() => toggleCommentDropdown(confession)}\r\n                            style={{\r\n                                backgroundColor: 'transparent',\r\n                                border: 'none',\r\n                            }}>\r\n                            <img src={commenticon} style={{ height: '25px', width: '25px' }} />\r\n                            <span style={{ marginLeft: '4px', fontFamily: 'Helvetica', position: 'relative', top: '-7px' }}>\r\n                                {formatCommentCount(commentCounts[confession.id] || 0)}\r\n                            </span>\r\n\r\n                        </button>\r\n                        {isCommentDropdownOpen && selectedConfessionComments.length > 0 && (\r\n                            <div style={{\r\n                                bottom: 50,\r\n                                overflowY: 'scroll',\r\n                                position: 'fixed',\r\n                                left: 0,\r\n                                height:'50%',\r\n                                width: '100%',\r\n                                backgroundColor: 'white',\r\n                                zIndex: '100',\r\n                                borderTopRightRadius: '20px',\r\n                                borderTopLeftRadius: '20px',\r\n                                border: '0px solid #000',\r\n                                boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)',\r\n                            }}>\r\n                                {selectedConfessionComments.map((comment) => (\r\n                                    <div style={{\r\n                                        padding: '0px 0',\r\n                                        borderBottom: '1px solid #ccc',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                    }}>\r\n                                        {comment.user_commented && comment.user_commented.profilepic ? (\r\n                                            <img src={comment.user_commented.profilepic} style={{\r\n                                                minWidth: '40px',\r\n                                                width: '40px',\r\n                                                height: '40px',\r\n                                                borderRadius: '50%',\r\n                                                marginLeft: '15px',\r\n                                                backgroundColor: '#000',\r\n                                                position: 'relative',\r\n                                                top: '-50px'\r\n                                            }} />\r\n                                        ) : (\r\n                                            <div style={{ minWidth: '40px', width: '40px', height: '40px', borderRadius: '50%', marginLeft: '15px' }} />\r\n                                        )}\r\n                                        <div key={comment.id} style={{\r\n                                            padding: '15px',\r\n                                            whiteSpace: 'pre-line',\r\n                                            overflow: 'hidden',\r\n                                            overflowWrap: 'break-word',\r\n                                        }}>\r\n                                            <p style={{\r\n                                                fontFamily: 'Helvetica',\r\n                                                color: '#000',\r\n                                                fontSize: '17px',\r\n                                                position: 'relative',\r\n                                                top: '4px',\r\n                                            }}><b>{comment.user_commented.first_name + comment.user_commented.last_name}</b></p>\r\n                                            <p style={{\r\n                                                fontFamily: 'Helvetica',\r\n                                                color: '#8f8f8f',\r\n                                                position: 'relative',\r\n                                                top: '-10px',\r\n                                                fontSize: '17px',\r\n                                            }}>@{comment.user_commented.username}</p>\r\n                                            <p style={{\r\n                                                fontFamily: 'Helvetica',\r\n                                                position: 'relative',\r\n                                                top: '-10px',\r\n                                                fontSize: '17px',\r\n                                                maxWidth: '90%',\r\n                                            }}>{comment.comment}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n\r\n                            </div>\r\n                        )}\r\n                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <p style={{\r\n                                fontFamily: 'Helvetica',\r\n                                position: 'relative',\r\n                                left: '27px',\r\n                                top: '-10px',\r\n                                maxWidth: '87%',\r\n                            }}>\r\n                <span dangerouslySetInnerHTML={{ __html: confession.content.replace(\r\n                        /@(\\w+)/g,\r\n                        (match, username) => `<b>@${username}</b>`\r\n                    ) }} />\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{\r\n                        borderBottom: '3px solid #000',\r\n                        borderRight: '1px solid #000',\r\n                        borderTopRightRadius: '0px',\r\n                        borderTopLeftRadius: '30px',\r\n                        borderBottomRightRadius: '11px',\r\n                        borderBottomLeftRadius: '2px',\r\n                        position: 'absolute',\r\n                        bottom: '-0.4px',\r\n                        left: '30.5px',\r\n                        width: '30px',\r\n                        height: '31px',\r\n                        background: confession.colorPair[1], // Use the second color from the pair\r\n                        clipPath: 'polygon(0% 100%, 100% 100%, 100% 0%, 0% 0%, 0% 75%)',\r\n                        zIndex: '0',\r\n                        transform: 'rotate(-83.6deg)',\r\n                        transformOrigin: 'bottom left',\r\n                    }}\r\n                    />\r\n                </div>\r\n            ))}\r\n            {isCommentDropdownOpen ? (\r\n                <div style={{ zIndex: '100', position: 'fixed', bottom: '10px', left: '0px', right: '0px' }}>\r\n                    <div style={{ background: '#fff', boxShadow: '0px 3px 9px rgba(0, 0, 0, 1)', borderRadius: '11px', height: '155px', zIndex: '100', width: '100%', position: 'relative', top: '70px' }}>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your comment\"\r\n                            style={{\r\n                                resize: 'none',\r\n                                whiteSpace: 'pre-wrap',\r\n                                overflowWrap: 'break-word',\r\n                                paddingBottom: '0px',\r\n                                paddingLeft: '18.5px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 21px)',\r\n                                height: '40px',\r\n                                background: 'transparent',\r\n                                border: '0px solid #ccc',\r\n                                fontSize: '20px',\r\n                                borderRadius: '0px',\r\n                                position: 'relative',\r\n                                top: '10px',\r\n                            }}\r\n                            value={newComment} // Bind the value to the state\r\n                            onChange={handleCommentInputChange} // Step 2: Attach the event handler\r\n                        />\r\n                        <button\r\n                            onClick={handleCommentSubmit} // Step 3: Attach the event handler\r\n                            style={{ float: 'right', right: '10px', position: 'relative', bottom: '-12px', backgroundColor: '#000', color: '#fff', border: 'none', borderRadius: '11px', padding: '6px 12px', fontSize: '15px', cursor: 'pointer', fontFamily: 'Helvetica' }}\r\n                        >\r\n                            <b>Comment</b>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                // Render your bottom navigation when the dropdown is closed\r\n                <div style={{ position: 'fixed', bottom: '0', left: '0', right: '0', backgroundColor: '#333' }}>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\PostPage.js",["112","113","114","115","116","117"],[],"import React, { useState, useEffect } from 'react';\r\nimport CrossIcon from './cross.png';\r\nimport axios from 'axios';\r\n\r\nconst PostPage = ({ switchToDashboard, users }) => {\r\n    const colorNameMap = {\r\n        '#88FD88B7': 'green',\r\n        '#76fd76': 'green',\r\n        '#AA89FFB7': 'purple',\r\n        '#9b76ff': 'purple',\r\n        '#FFF189B7': 'yellow',\r\n        '#ffef76': 'yellow',\r\n        '#FF8989B7': 'red',\r\n        '#FF7676FF': 'red',\r\n        '#89E7FFB7': 'blue',\r\n        '#76cfff': 'blue',\r\n        '#FC85BDB7': 'pink',\r\n        '#ff76b3': 'pink',\r\n    };\r\n    const [newContent, setNewContent] = useState('');\r\n    const [items, setItems] = useState([]);\r\n    const [mentionedUsers, setMentionedUsers] = useState([]);\r\n    const [suggestedMentionedUsers, setSuggestedMentionedUsers] = useState([]);\r\n    const [selectedStickyNoteColorIndex, setSelectedStickyNoteColorIndex] = useState(0);\r\n    const [showStickyNote, setShowStickyNote] = useState(true);\r\n\r\n    const handleItemSubmit = async () => {\r\n        if (newContent.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Extract mentioned user's name\r\n        const mentionedUserMatch = newContent.match(/@(\\w+)/);\r\n        const mentionedUser = mentionedUserMatch ? mentionedUserMatch[1] : null; // If no mention, set it to null\r\n\r\n        // Get the selected color name from colorNameMap\r\n        const selectedColorShade = stickyNoteColors[selectedStickyNoteColorIndex];\r\n        const colorCode = colorNameMap[selectedColorShade];\r\n\r\n        // Create the payload based on whether a mentioned user is present\r\n        const payload = {\r\n            content: newContent,\r\n            color_code: colorCode,\r\n            date_posted: new Date().toISOString(),\r\n            author: '', // Replace with actual user info\r\n            stickyNoteColor: selectedStickyNoteColorIndex,\r\n        };\r\n\r\n        // Include mentioned_user field only if mentionedUser is not null\r\n        if (mentionedUser !== null) {\r\n            payload.mentioned_user = mentionedUser;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post('https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/posts/', payload, {\r\n                headers: {\r\n                    Authorization: `Token ${token}`,\r\n                },\r\n            });\r\n\r\n            // Assuming you have a function switchToDashboard that handles navigation\r\n            switchToDashboard(); // Redirect to the dashboard\r\n\r\n            // Rest of the code...\r\n        } catch (error) {\r\n            // Handle errors here\r\n            console.error('Error posting item:', error);\r\n        }\r\n    };\r\n\r\n    const fetchUserSuggestions = async (mentionInput) => {\r\n        try {\r\n            const response = await axios.get('https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/users/');\r\n            const allUsers = response.data;\r\n            const filteredUsers = allUsers.filter((user) =>\r\n                user.username.toLowerCase().includes(mentionInput)\r\n            );\r\n            const uniqueSuggestions = filteredUsers.filter((user, index, self) =>\r\n                index === self.findIndex((u) => u.username === user.username)\r\n            );\r\n\r\n            setSuggestedMentionedUsers(uniqueSuggestions);\r\n        } catch (error) {\r\n            console.error('Error fetching user suggestions:', error);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        const inputText = event.target.value;\r\n        setNewContent(inputText);\r\n\r\n        if (inputText.length >= 3 && inputText.includes('@')) {\r\n            const lastMentionStart = inputText.lastIndexOf('@');\r\n            const mentionInput = inputText.substring(lastMentionStart + 1).toLowerCase();\r\n            fetchUserSuggestions(mentionInput);\r\n        } else {\r\n            setSuggestedMentionedUsers([]);\r\n        }\r\n    };\r\n\r\n    const handleMentionClick = (user) => {\r\n        const mention = `@${user.username}`;\r\n        const lastMentionStart = newContent.lastIndexOf('@');\r\n\r\n        if (lastMentionStart >= 0) {\r\n            const preMentionText = newContent.substring(0, lastMentionStart);\r\n            const updatedContent = preMentionText + mention + ' ';\r\n            setNewContent(updatedContent);\r\n        } else {\r\n            setNewContent(mention + ' ');\r\n        }\r\n        setMentionedUsers([...mentionedUsers, user]);\r\n        setSuggestedMentionedUsers([]);\r\n    };\r\n\r\n    const getStickyNoteColor = () => {\r\n        return stickyNoteColors[selectedStickyNoteColorIndex];\r\n    };\r\n\r\n    const getStickyNoteColor1 = () => {\r\n        return stickyNoteColors1[selectedStickyNoteColorIndex];\r\n    };\r\n\r\n    const handleColorChange = (colorIndex) => {\r\n        const shade1 = stickyNoteColors[colorIndex];\r\n        const shade2 = stickyNoteColors1[colorIndex];\r\n        const combinedColor = { shade1, shade2 };\r\n        setSelectedStickyNoteColorIndex(colorIndex);\r\n        const colorName = colorNameMap[shade1] || colorNameMap[shade2];\r\n        // console.log(colorName);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            setShowStickyNote(window.scrollY <= 0);\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    const stickyNoteColors = [\r\n        '#FC85BDB7',\r\n        '#89E7FFB7',\r\n        '#FF8989B7',\r\n        '#FFF189B7',\r\n        '#AA89FFB7',\r\n        '#88FD88B7',\r\n    ];\r\n    const stickyNoteColors1 = [\r\n        '#ff76b3',\r\n        '#76cfff',\r\n        '#FF7676FF',\r\n        '#ffef76',\r\n        '#9b76ff',\r\n        '#76fd76',\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={switchToDashboard} style={{ position: 'absolute', top: '20px', left: '10px', background: 'none', border: 'none' }}>\r\n                <img src={CrossIcon} alt=\"Close\" style={{ width: '15px', height: '15px' }} />\r\n            </button>\r\n            <div style={{ marginTop: '110px' }}>\r\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '10px' }}>\r\n                    {stickyNoteColors1.map((color, index) => (\r\n                        <div\r\n                            key={index}\r\n                            onClick={() => handleColorChange(index)}\r\n                            style={{\r\n                                width: '20px',\r\n                                height: '20px',\r\n                                backgroundColor: color,\r\n                                borderRadius: '50%',\r\n                                margin: '0 5px',\r\n                                cursor: 'pointer',\r\n                                border: selectedStickyNoteColorIndex === index ? '2px solid #000' : 'none',\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        background: getStickyNoteColor(),\r\n                        borderRadius: '11px',\r\n                        borderBottomLeftRadius: '30px',\r\n                        position: showStickyNote ? 'sticky' : 'relative',\r\n                        top: showStickyNote ? '0' : 'initial',\r\n                        zIndex: showStickyNote ? '10' : 'auto',\r\n                        border: '1px solid #000',\r\n                        padding: '10px',\r\n                        margin: '10px',\r\n                        maxWidth: '100%',\r\n                        boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            borderBottom:'2px solid #000',\r\n                            borderRight:'1px solid #000',\r\n                            borderTopRightRadius: '0px',\r\n                            borderTopLeftRadius: '30px',\r\n                            borderBottomRightRadius: '11px',\r\n                            borderBottomLeftRadius: '0px',\r\n                            position: 'absolute',\r\n                            bottom: '-0px',\r\n                            left: '27px',\r\n                            width: '30px',\r\n                            height: '30px',\r\n                            background: getStickyNoteColor1(),\r\n                            clipPath: 'polygon(0% 100%, 100% 100%, 100% 0%, 0% 0%, 0% 75%)',\r\n                            zIndex: '0',\r\n                            transform: 'rotate(-81deg)',\r\n                            transformOrigin: 'bottom left',\r\n                        }}\r\n                    />\r\n                    <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            top: '0',\r\n                            left: '0',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            backgroundColor: getStickyNoteColor(),\r\n                            opacity: '1%',\r\n                            zIndex: '-1',\r\n                            borderRadius: '11px',\r\n                        }}\r\n                    />\r\n                    <textarea\r\n                        placeholder=\"@mention Write your confession here...\"\r\n                        value={newContent}\r\n                        onChange={handleInputChange}\r\n                        rows={Math.min(10, newContent.split('\\n').length + 1)}\r\n                        style={{  position: 'relative', zIndex: '1',backgroundColor: 'transparent',resize: 'none', marginLeft: '25px',border: 'none',borderRadius:'11px',outline: 'none', lineHeight:'1.5',width: 'calc(100% - 25px)', fontSize: '20px' , fontFamily:'Helvetica'}}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {suggestedMentionedUsers.length > 0 && (\r\n                        <ul>\r\n                            {suggestedMentionedUsers.map((user, index) => (\r\n                                <li key={index} style={{ display: 'flex', alignItems: 'center',borderBottom: '1px solid #ccc', padding: '0px 0',position: 'relative',left: '-20px' }} onClick={() => handleMentionClick(user)}>\r\n                                    <img src={user.image} style={{ width: '40px', height: '40px', borderRadius: '50%', marginRight: '10px' }} />\r\n                                    <div style={{ flex: '1', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                        <div>\r\n                                            <p style={{ fontFamily: 'Helvetica', color: '#000', fontSize: '17px' ,position: 'relative',top:'4px', margin: '10px'}}><b>@{user.username}</b></p>\r\n                                            <p style={{ fontFamily: 'Helvetica',color: '#8f8f8f',position: 'relative',top:'-2px', fontSize: '17px', margin: '10px' }}>{user.name}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n                </div>\r\n                <button onClick={handleItemSubmit} style={{ position: 'fixed', top: '20px', right: '10px', background: '#000', color: '#fff', border: 'none', borderRadius: '11px', padding: '6px 12px', fontSize: '20px', cursor: 'pointer', fontFamily:'Helvetica' }}><b>Confess!</b></button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostPage;\r\n","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\LoginForm.js",["118","119"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport rvclogo from './rvclogo.png';\r\n\r\nfunction LoginForm({ setIsAuthenticated }) {\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: '',\r\n    });\r\n\r\n    const checkTokenOnPageLoad = () => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            // Check if the token is valid (you may need to implement token validation logic)\r\n            // If it's valid, set the authentication status to true\r\n            setIsAuthenticated(true);\r\n        }\r\n    };\r\n\r\n    const [signupData, setSignupData] = useState({\r\n        email: '',\r\n        firstname: '',\r\n        lastname: '',\r\n        password: '',\r\n        confirmpassword: '',\r\n    });\r\n\r\n    const [error, setError] = useState('');\r\n    const [isSignup, setIsSignup] = useState(false);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const handleSignupChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setSignupData({\r\n            ...signupData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const handleTabChange = (isSignup) => {\r\n        setIsSignup(isSignup);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            // Send a POST request to the authentication endpoint\r\n            const response = await axios.post(\r\n                'https://p8u4dzxbx2uzapo8hev0ldeut0xcdm.pythonanywhere.com/api-token-auth/',\r\n                {\r\n                    username: formData.username,\r\n                    password: formData.password,\r\n                }\r\n            );\r\n\r\n            // Extract the token from the response data\r\n            const { token } = response.data;\r\n\r\n            // Store the token and username in local storage\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('username', formData.username);\r\n\r\n            console.log('Token and username stored in local storage:', token, formData.username);\r\n\r\n            // Update the authentication status\r\n            setIsAuthenticated(true);\r\n\r\n            // Clear error message\r\n            setError('');\r\n        } catch (error) {\r\n            if (error.response) {\r\n                // The request was made, but the server responded with an error\r\n                console.error('Server Error:', error.response.data);\r\n                setError('Wrong username or password. Please try again.'); // Set error message\r\n            } else if (error.request) {\r\n                // The request was made, but no response was received\r\n                console.error('No Response:', error.request);\r\n                setError('No response from the server. Please try again later.'); // Set error message\r\n            } else {\r\n                // Something else went wrong\r\n                console.error('Error:', error.message);\r\n                setError('An error occurred. Please try again.'); // Set error message\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Disable scrolling when the component mounts\r\n        document.body.style.overflow = 'hidden';\r\n\r\n        // Check for a valid token when the component mounts\r\n        checkTokenOnPageLoad();\r\n\r\n        // Re-enable scrolling when the component unmounts\r\n        return () => {\r\n            document.body.style.overflow = 'visible'; // or 'auto' if you want to enable scrolling\r\n        };\r\n    }, []);\r\n\r\n    const handleSignupSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            // Check if password and confirm password match\r\n            if (signupData.password !== signupData.confirmpassword) {\r\n                setError('Passwords do not match. Please try again.');\r\n                return;\r\n            }\r\n\r\n            // Send a POST request to the authentication endpoint for signup...\r\n            // Update the authentication status\r\n            setIsAuthenticated(true);\r\n            // Clear error message\r\n            setError('');\r\n        } catch (error) {\r\n            // Handle errors here...\r\n        }\r\n    };\r\n\r\n    const shadowAnimation = {\r\n\r\n        animation: 'shadowMove linear 5s infinite',\r\n    };\r\n\r\n    const gradientShadowAnimation = `@keyframes shadowMove {\r\n  0% {\r\n    box-shadow:  0 0 20px rgba(106, 90, 205, 0.4), inset 0 0 1000px rgba(106, 90, 205, 0.4);\r\n  }\r\n  20% {\r\n    box-shadow:  0 0 20px rgba(60, 179, 113, 0.4), inset 0 0 1000px rgba(60, 179, 113, 0.4);\r\n  }\r\n  40% {\r\n    box-shadow: 0 0 20px rgba(255, 118, 179, 0.4), inset 0 0 1000px rgba(255, 118, 179, 0.4);\r\n  }\r\n  60% {\r\n    box-shadow:  0 0 20px rgba(255, 0, 0, 0.4), inset 0 0 1000px rgba(255, 0, 0, 0.4);\r\n  }\r\n  60% {\r\n    box-shadow:  0 0 20px rgba(255, 165, 0, 0.4), inset 0 0 1000px rgba(255, 165, 0, 0.4);\r\n  }\r\n  100% {\r\n    box-shadow:  0 0 20px rgba(0, 225, 255, 0.4),inset 0 0 1000px rgba(0, 225, 255, 0.4);\r\n  }\r\n}`;\r\n\r\n    return (\r\n        <div style={{backgroundColor:'#fff',display: 'flex', flexDirection: 'column', justifyContent:'center', alignItems: 'center' }} >\r\n            <style>{gradientShadowAnimation}</style>\r\n\r\n            <img src={rvclogo} style={{height:'250px', width: '250px', marginBottom: '-10px',marginTop: '-30px', justifyContent:'center', alignItems: 'center', position: 'relative', }} />\r\n            <div style={{position:'relative', top:'-30px',  }}>\r\n                <button style={{ marginRight: '20px', fontSize: '15px',fontFamily: 'Helvetica' ,  padding: '0.7em 1.7em', fontsize: '18px', borderRadius: '0.5em', background: '#e8e8e8', border: '1px solid #e8e8e8', boxShadow: '6px 6px 12px #c5c5c5, -6px -6px 12px #ffffff', backgroundColor: isSignup ? '' : '#000', color: isSignup ? '' : 'white', }} onClick={() => handleTabChange(false)}><b>Log In</b></button>\r\n                <button style={{  fontSize: '15px',fontFamily: 'Helvetica' ,  padding: '0.7em 1.7em', fontsize: '18px', borderRadius: '0.5em', background: '#e8e8e8', border: '1px solid #e8e8e8', boxShadow: '6px 6px 12px #c5c5c5, -6px -6px 12px #ffffff',backgroundColor: isSignup ? '#000' : '', color: isSignup ? 'white' : '', }} onClick={() => handleTabChange(true)}><b>Sign Up</b></button>\r\n            </div>\r\n\r\n            {isSignup ? (\r\n                <form onSubmit={handleSignupSubmit}   style={{   paddingTop:'15px', height:'350px', width: '85%', maxWidth: '400px', textAlign: 'center', padding: '0 20px', position: 'relative',  borderRadius: '11px', ...shadowAnimation,  }}>\r\n\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={signupData.email}\r\n                            onChange={handleSignupChange}\r\n                            style={{\r\n                                boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',\r\n                            }}\r\n                            pattern=\"^[a-zA-Z0-9._%+-]+@(rvce.edu.in|rvu.edu.in)$\"\r\n                            title=\"Please enter a valid email address ending with @rvce.edu.in or @rvu.edu.in\"\r\n                        />\r\n                    </div>\r\n\r\n\r\n\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstname\"\r\n                            placeholder=\"First name\"\r\n                            value={signupData.firstname}\r\n                            onChange={handleSignupChange}\r\n                            style={{\r\n                                boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',\r\n\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastname\"\r\n                            placeholder=\"Last name\"\r\n                            value={signupData.lastname}\r\n                            onChange={handleSignupChange}\r\n                            style={{\r\n                                boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',\r\n\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={signupData.password}\r\n                            onChange={handleSignupChange}\r\n                            style={{\r\n                                boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',\r\n\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"confirmpassword\"\r\n                            placeholder=\"Confirm password\"\r\n                            value={signupData.confirmpassword}\r\n                            onChange={handleSignupChange}\r\n                            style={{\r\n                                boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',\r\n\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n\r\n\r\n                    <button type=\"submit\" style={{\r\n                        boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',color:'#fff', fontFamily: 'Helvetica', width: 'calc(100% - 25px)', height: '40px',background:'#000',border:'1px solid #ccc',fontSize:'18px',borderRadius: '50px',\r\n                    }}>\r\n                        Sign Up\r\n                    </button>\r\n                </form>\r\n            ) : (\r\n\r\n                <form  onSubmit={handleSubmit} style={{...shadowAnimation, marginBottom:'0px', paddingTop:'16px', height:'200px', width: '85%', maxWidth: '400px', textAlign: 'center', padding: '0 20px', position: 'relative', background: 'transparent', borderRadius: '11px',  }}>\r\n\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            placeholder=\"Username\"\r\n                            value={formData.username}\r\n                            onChange={handleChange}\r\n                            style={{boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',}}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={formData.password}\r\n                            onChange={handleChange}\r\n                            style={{  boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',\r\n                                marginBottom: '15px',\r\n                                paddingLeft: '18px',\r\n                                fontFamily: 'Helvetica',\r\n                                width: 'calc(100% - 25px)',\r\n                                height: '40px',\r\n                                background: 'rgba(255, 255, 255, 0.5)',\r\n                                border: '1px solid #ccc',\r\n                                fontSize: '18px',\r\n                                zIndex: '1',\r\n                                borderRadius: '11px',}}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\"\r\n                            style={{  boxShadow: '0px 3px 6px rgba(0, 0, 0, 0.9)',color:'#fff', fontFamily: 'Helvetica', width: 'calc(100% - 25px)', height: '40px',background:'#000',border:'1px solid #ccc',fontSize:'18px',borderRadius: '50px',}}\r\n                    >Log In</button>\r\n                </form>\r\n            )}\r\n\r\n            {error && <div style={{ color: 'red' }}>{error}</div>}\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\Prakhar Jain\\WebstormProjects\\FrontBackLinking\\FrontBackLinking\\src\\SearchPage.js",[],[],{"ruleId":"120","severity":1,"message":"121","line":33,"column":37,"nodeType":"122","messageId":"123","endLine":33,"endColumn":38},{"ruleId":"120","severity":1,"message":"121","line":45,"column":33,"nodeType":"122","messageId":"123","endLine":45,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":71,"column":23,"nodeType":"126","messageId":"127","endLine":71,"endColumn":35},{"ruleId":"128","severity":1,"message":"129","line":110,"column":9,"nodeType":"130","messageId":"131","endLine":113,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":121,"column":25,"nodeType":"134","endLine":121,"endColumn":117},{"ruleId":"132","severity":1,"message":"133","line":122,"column":25,"nodeType":"134","endLine":122,"endColumn":116},{"ruleId":"132","severity":1,"message":"133","line":123,"column":25,"nodeType":"134","endLine":123,"endColumn":122},{"ruleId":"124","severity":1,"message":"135","line":2,"column":8,"nodeType":"126","messageId":"127","endLine":2,"endColumn":16},{"ruleId":"124","severity":1,"message":"136","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":18},{"ruleId":"124","severity":1,"message":"137","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":16},{"ruleId":"124","severity":1,"message":"138","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":19},{"ruleId":"124","severity":1,"message":"139","line":6,"column":16,"nodeType":"126","messageId":"127","endLine":6,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":73,"column":21,"nodeType":"134","endLine":73,"endColumn":161},{"ruleId":"132","severity":1,"message":"133","line":254,"column":37,"nodeType":"134","endLine":254,"endColumn":147},{"ruleId":"120","severity":1,"message":"121","line":68,"column":37,"nodeType":"122","messageId":"123","endLine":68,"endColumn":38},{"ruleId":"124","severity":1,"message":"125","line":94,"column":23,"nodeType":"126","messageId":"127","endLine":94,"endColumn":35},{"ruleId":"128","severity":1,"message":"129","line":136,"column":9,"nodeType":"130","messageId":"131","endLine":139,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":147,"column":25,"nodeType":"134","endLine":156,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":157,"column":25,"nodeType":"134","endLine":166,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":167,"column":25,"nodeType":"134","endLine":176,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":177,"column":25,"nodeType":"134","endLine":186,"endColumn":27},{"ruleId":"124","severity":1,"message":"139","line":13,"column":12,"nodeType":"126","messageId":"127","endLine":13,"endColumn":26},{"ruleId":"124","severity":1,"message":"140","line":34,"column":12,"nodeType":"126","messageId":"127","endLine":34,"endColumn":17},{"ruleId":"124","severity":1,"message":"141","line":34,"column":19,"nodeType":"126","messageId":"127","endLine":34,"endColumn":27},{"ruleId":"124","severity":1,"message":"142","line":36,"column":22,"nodeType":"126","messageId":"127","endLine":36,"endColumn":33},{"ruleId":"143","severity":1,"message":"144","line":383,"column":8,"nodeType":"145","endLine":383,"endColumn":10,"suggestions":"146"},{"ruleId":"143","severity":1,"message":"147","line":388,"column":8,"nodeType":"145","endLine":388,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":519,"column":43,"nodeType":"151","messageId":"152","endLine":519,"endColumn":45},{"ruleId":"143","severity":1,"message":"153","line":560,"column":8,"nodeType":"145","endLine":560,"endColumn":18,"suggestions":"154"},{"ruleId":"132","severity":1,"message":"133","line":591,"column":17,"nodeType":"134","endLine":591,"endColumn":235},{"ruleId":"132","severity":1,"message":"133","line":604,"column":33,"nodeType":"134","endLine":604,"endColumn":176},{"ruleId":"132","severity":1,"message":"133","line":617,"column":37,"nodeType":"134","endLine":635,"endColumn":39},{"ruleId":"132","severity":1,"message":"133","line":787,"column":41,"nodeType":"134","endLine":787,"endColumn":171},{"ruleId":"132","severity":1,"message":"133","line":803,"column":69,"nodeType":"134","endLine":803,"endColumn":133},{"ruleId":"132","severity":1,"message":"133","line":803,"column":136,"nodeType":"134","endLine":803,"endColumn":203},{"ruleId":"132","severity":1,"message":"133","line":811,"column":41,"nodeType":"134","endLine":811,"endColumn":108},{"ruleId":"132","severity":1,"message":"133","line":838,"column":53,"nodeType":"134","endLine":847,"endColumn":58},{"ruleId":"132","severity":1,"message":"133","line":995,"column":37,"nodeType":"134","endLine":995,"endColumn":167},{"ruleId":"132","severity":1,"message":"133","line":1011,"column":62,"nodeType":"134","endLine":1011,"endColumn":126},{"ruleId":"132","severity":1,"message":"133","line":1011,"column":129,"nodeType":"134","endLine":1011,"endColumn":196},{"ruleId":"132","severity":1,"message":"133","line":1019,"column":37,"nodeType":"134","endLine":1019,"endColumn":104},{"ruleId":"132","severity":1,"message":"133","line":1046,"column":49,"nodeType":"134","endLine":1055,"endColumn":54},{"ruleId":"132","severity":1,"message":"133","line":1188,"column":33,"nodeType":"134","endLine":1188,"endColumn":143},{"ruleId":"124","severity":1,"message":"135","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":16},{"ruleId":"124","severity":1,"message":"136","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":18},{"ruleId":"124","severity":1,"message":"137","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":16},{"ruleId":"124","severity":1,"message":"138","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":19},{"ruleId":"124","severity":1,"message":"139","line":16,"column":12,"nodeType":"126","messageId":"127","endLine":16,"endColumn":26},{"ruleId":"143","severity":1,"message":"155","line":252,"column":8,"nodeType":"145","endLine":252,"endColumn":19,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"133","line":383,"column":33,"nodeType":"134","endLine":383,"endColumn":163},{"ruleId":"132","severity":1,"message":"133","line":398,"column":57,"nodeType":"134","endLine":398,"endColumn":121},{"ruleId":"132","severity":1,"message":"133","line":398,"column":124,"nodeType":"134","endLine":398,"endColumn":191},{"ruleId":"132","severity":1,"message":"133","line":406,"column":29,"nodeType":"134","endLine":406,"endColumn":96},{"ruleId":"132","severity":1,"message":"133","line":435,"column":45,"nodeType":"134","endLine":444,"endColumn":50},{"ruleId":"124","severity":1,"message":"157","line":21,"column":12,"nodeType":"126","messageId":"127","endLine":21,"endColumn":17},{"ruleId":"124","severity":1,"message":"158","line":21,"column":19,"nodeType":"126","messageId":"127","endLine":21,"endColumn":27},{"ruleId":"124","severity":1,"message":"159","line":57,"column":19,"nodeType":"126","messageId":"127","endLine":57,"endColumn":27},{"ruleId":"124","severity":1,"message":"160","line":129,"column":15,"nodeType":"126","messageId":"127","endLine":129,"endColumn":28},{"ruleId":"124","severity":1,"message":"161","line":131,"column":15,"nodeType":"126","messageId":"127","endLine":131,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":248,"column":37,"nodeType":"134","endLine":248,"endColumn":145},{"ruleId":"143","severity":1,"message":"162","line":106,"column":8,"nodeType":"145","endLine":106,"endColumn":10,"suggestions":"163"},{"ruleId":"132","severity":1,"message":"133","line":158,"column":13,"nodeType":"134","endLine":158,"endColumn":188},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'setUsersData' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'homeIcon' is defined but never used.","'searchIcon' is defined but never used.","'postIcon' is defined but never used.","'profileIcon' is defined but never used.","'showStickyNote' is assigned a value but never used.","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","'setUsername' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMentions'. Either include it or remove the dependency array.","ArrayExpression",["164"],"React Hook useEffect has a missing dependency: 'fetchConfessions'. Either include it or remove the dependency array.",["165"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'fetchUserId'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has a missing dependency: 'colorMapping'. Either include it or remove the dependency array.",["167"],"'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'response' is assigned a value but never used.","'combinedColor' is assigned a value but never used.","'colorName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkTokenOnPageLoad'. Either include it or remove the dependency array.",["168"],{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [fetchMentions]",{"range":"179","text":"180"},"Update the dependencies array to be: [fetchConfessions]",{"range":"181","text":"182"},"Update the dependencies array to be: [fetchUserId, username]",{"range":"183","text":"184"},"Update the dependencies array to be: [authToken, colorMapping]",{"range":"185","text":"186"},"Update the dependencies array to be: [checkTokenOnPageLoad]",{"range":"187","text":"188"},[16559,16561],"[fetchMentions]",[16628,16630],"[fetchConfessions]",[24078,24088],"[fetchUserId, username]",[10086,10097],"[authToken, colorMapping]",[3612,3614],"[checkTokenOnPageLoad]"]