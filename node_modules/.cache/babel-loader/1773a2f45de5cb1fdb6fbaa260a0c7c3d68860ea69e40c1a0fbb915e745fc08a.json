{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prakhar Jain\\\\WebstormProjects\\\\FrontEndM\\\\RVC\\\\src\\\\LoginForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm({\n  setIsAuthenticated\n}) {\n  _s();\n  const [token, setToken] = useState(''); // Added state to store the token\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Data to be sent in the POST request\n      const formData = {\n        username: 'MrWhosetheBoss',\n        password: 'Password@123'\n      };\n\n      // Send a POST request to the authentication endpoint with specific data\n      const response = await axios.post('/api-token-auth/', formData);\n\n      // Extract the token from the response data and store it in state\n      const {\n        token\n      } = response.data;\n      setToken(token);\n\n      // Store the token in local storage\n      localStorage.setItem('token', token);\n\n      // Update the authentication status\n      setIsAuthenticated(true);\n\n      // Handle success, e.g., redirect to a new page\n      console.log('Login Successful. Token:', token);\n    } catch (error) {\n      if (error.response) {\n        // The request was made, but the server responded with an error\n        console.error('Server Error:', error.response.data);\n      } else if (error.request) {\n        // The request was made, but no response was received\n        console.error('No Response:', error.request);\n      } else {\n        // Something else went wrong\n        console.error('Error:', error.message);\n      }\n\n      // Handle error, e.g., display an error message to the user\n      // You can set a state variable to display an error message on the form\n      // Example: setError('Login failed. Please check your credentials.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), token && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token Received: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginForm, \"ASU5DC/3PNAtDu6g7HTvQX3bJZs=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","LoginForm","setIsAuthenticated","_s","token","setToken","handleSubmit","e","preventDefault","formData","username","password","response","post","data","localStorage","setItem","console","log","error","request","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","_c","$RefreshReg$"],"sources":["C:/Users/Prakhar Jain/WebstormProjects/FrontEndM/RVC/src/LoginForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction LoginForm({ setIsAuthenticated }) {\r\n    const [token, setToken] = useState(''); // Added state to store the token\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            // Data to be sent in the POST request\r\n            const formData = {\r\n                username: 'MrWhosetheBoss',\r\n                password: 'Password@123',\r\n            };\r\n\r\n            // Send a POST request to the authentication endpoint with specific data\r\n            const response = await axios.post(\r\n                '/api-token-auth/',\r\n                formData\r\n            );\r\n\r\n            // Extract the token from the response data and store it in state\r\n            const { token } = response.data;\r\n            setToken(token);\r\n\r\n            // Store the token in local storage\r\n            localStorage.setItem('token', token);\r\n\r\n            // Update the authentication status\r\n            setIsAuthenticated(true);\r\n\r\n            // Handle success, e.g., redirect to a new page\r\n            console.log('Login Successful. Token:', token);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                // The request was made, but the server responded with an error\r\n                console.error('Server Error:', error.response.data);\r\n            } else if (error.request) {\r\n                // The request was made, but no response was received\r\n                console.error('No Response:', error.request);\r\n            } else {\r\n                // Something else went wrong\r\n                console.error('Error:', error.message);\r\n            }\r\n\r\n            // Handle error, e.g., display an error message to the user\r\n            // You can set a state variable to display an error message on the form\r\n            // Example: setError('Login failed. Please check your credentials.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n\r\n            {token && <p>Token Received: {token}</p>} {/* Display the token if it exists */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAC;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC,MAAMS,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG;QACbC,QAAQ,EAAE,gBAAgB;QAC1BC,QAAQ,EAAE;MACd,CAAC;;MAED;MACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAC7B,kBAAkB,EAClBJ,QACJ,CAAC;;MAED;MACA,MAAM;QAAEL;MAAM,CAAC,GAAGQ,QAAQ,CAACE,IAAI;MAC/BT,QAAQ,CAACD,KAAK,CAAC;;MAEf;MACAW,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;;MAEpC;MACAF,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACAe,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEd,KAAK,CAAC;IAClD,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZ,IAAIA,KAAK,CAACP,QAAQ,EAAE;QAChB;QACAK,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACP,QAAQ,CAACE,IAAI,CAAC;MACvD,CAAC,MAAM,IAAIK,KAAK,CAACC,OAAO,EAAE;QACtB;QACAH,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACC,OAAO,CAAC;MAChD,CAAC,MAAM;QACH;QACAH,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACE,OAAO,CAAC;MAC1C;;MAEA;MACA;MACA;IACJ;EACJ,CAAC;;EAED,oBACIrB,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACd1B,OAAA;MAAM2B,QAAQ,EAAErB,YAAa;MAAAgB,QAAA,eACzBtB,OAAA;QAAQ4B,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EAENtB,KAAK,iBAAIJ,OAAA;MAAAsB,QAAA,GAAG,kBAAgB,EAAClB,KAAK;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEd;AAACvB,EAAA,CA3DQF,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AA6DlB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}